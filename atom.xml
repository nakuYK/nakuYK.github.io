<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>久等</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-10T09:34:55.209Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YangKun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一首词</title>
    <link href="http://yoursite.com/2020/07/10/%E8%AE%B0%E4%B8%80%E9%A6%96%E8%AF%8D/"/>
    <id>http://yoursite.com/2020/07/10/记一首词/</id>
    <published>2020-07-10T04:57:49.000Z</published>
    <updated>2020-07-10T09:34:55.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020-07-10"><a href="#2020-07-10" class="headerlink" title="2020-07-10"></a>2020-07-10</h2><blockquote><p>&emsp;&emsp;&emsp;&emsp; <strong>《蝶恋花 • 春景》</strong>   宋 • 苏轼</p><p>花褪残红青杏小。燕子飞时，绿水人家绕。枝上柳绵吹又少，天涯何处无芳草!<br>墙里秋千墙外道。墙外行人，墙里佳人笑。笑渐不问声渐悄，多情却被无情恼。</p></blockquote><p><br></p><blockquote><p>&emsp;&emsp;&emsp;&emsp; <strong>《南歌子 • 天上星河转》</strong>   宋 • 李清照</p><p>天上星河转，人间帘幕垂。凉生枕簟泪痕滋。起解罗衣聊问、夜何其。<br>翠贴莲蓬小，金销藕叶稀。旧时天气旧时衣。只有情怀不似、旧家时。</p></blockquote><p><br></p><p><img src="2020-07-10.png" alt="来源-&#39;瞬间公众号&#39;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2020-07-10&quot;&gt;&lt;a href=&quot;#2020-07-10&quot; class=&quot;headerlink&quot; title=&quot;2020-07-10&quot;&gt;&lt;/a&gt;2020-07-10&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 
      
    
    </summary>
    
      <category term="记一首词" scheme="http://yoursite.com/categories/%E8%AE%B0%E4%B8%80%E9%A6%96%E8%AF%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>微信小程序滑动切换样式</title>
    <link href="http://yoursite.com/2020/07/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BB%91%E5%8A%A8%E5%88%87%E6%8D%A2%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/07/07/微信小程序滑动切换样式/</id>
    <published>2020-07-07T09:00:35.000Z</published>
    <updated>2020-07-08T01:08:25.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信小程序滑动切换样式"><a href="#微信小程序滑动切换样式" class="headerlink" title="微信小程序滑动切换样式"></a>微信小程序滑动切换样式</h3><p>之前做了一个做题的功能，用到了滑动切换上、下一题，当时没有记录，这次又有一个滑动切换的需求，做一个小demo记录一下，实际项目代码比较复杂就不贴了。</p><p>我这个实际上只是一个动态赋值，并不涉及到多个 <strong>view</strong> 轮换，所以可能在切换动画方面就不太那么好做了。如果数据不多可以用官方的 <strong><a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html" target="_blank" rel="noopener">swiper</a></strong> 组件比较方便。</p><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="20200708_083658.gif" alt="微信小程序滑动切换样式效果图"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h5><p><strong><a href="https://developers.weixin.qq.com/s/3qgTPGmq73is" target="_blank" rel="noopener">https://developers.weixin.qq.com/s/3qgTPGmq73is</a></strong></p><h5 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;navbar&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span> <span class="attr">bindtap</span>=<span class="string">"navbarClick"</span> <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;index == navbar_index?'active':''&#125;&#125;"</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"default &#123;&#123;index == navbar_index?'active':''&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">bindtouchstart</span>=<span class="string">"touchStart"</span> <span class="attr">bindtouchmove</span>=<span class="string">"touchMove"</span> <span class="attr">bindtouchend</span>=<span class="string">"touchEnd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;navbar&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;index == navbar_index&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"&#123;&#123;item.style&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">page</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navbar</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90</span>rpx;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">16</span>rpx <span class="number">0</span> <span class="number">10</span>rpx <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">10</span>rpx solid <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar-item</span>&#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar-item</span> <span class="selector-tag">text</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">26</span>rpx;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">54</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar-item</span> <span class="selector-tag">text</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#323232</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar-item</span> <span class="selector-class">.default</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">56</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar-item</span> <span class="selector-tag">view</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span>&#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40</span>rpx <span class="number">36</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.view</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//滑动开始与结束位置</span></span><br><span class="line"><span class="keyword">var</span> startX, endX;</span><br><span class="line"><span class="comment">//滑动事件开关</span></span><br><span class="line"><span class="keyword">var</span> slip_event = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    navbar:[&#123;</span><br><span class="line">      text: <span class="string">'项目1'</span>,</span><br><span class="line">      style: <span class="string">'background-color:#323232'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      text: <span class="string">'项目2'</span>,</span><br><span class="line">      style: <span class="string">'background-color:#1890FF'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      text: <span class="string">'项目3'</span>,</span><br><span class="line">      style: <span class="string">'background-color:#07C160'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      text: <span class="string">'项目4'</span>,</span><br><span class="line">      style: <span class="string">'background-color:#E42A2A'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    navbar_index: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//点击项目切换</span></span><br><span class="line">  navbarClick: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      navbar_index: e.currentTarget.dataset.index</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//监听滑动开始动作</span></span><br><span class="line">  touchStart: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取滑动开始位置X坐标</span></span><br><span class="line">    startX = e.touches[<span class="number">0</span>].pageX;</span><br><span class="line">    slip_event = <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//手指触摸后移动事件</span></span><br><span class="line">  touchMove: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取滑动移动位置X坐标</span></span><br><span class="line">    endX = e.touches[<span class="number">0</span>].pageX;</span><br><span class="line">    <span class="keyword">if</span> (slip_event) &#123;</span><br><span class="line">      <span class="keyword">if</span> (endX - startX &gt; <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="comment">//执行右滑事件</span></span><br><span class="line">        <span class="keyword">this</span>.moveRight();</span><br><span class="line">        slip_event = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (startX - endX &gt; <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="comment">//执行左滑事件</span></span><br><span class="line">        <span class="keyword">this</span>.moveLeft();</span><br><span class="line">        slip_event = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//手指触摸动作结束</span></span><br><span class="line">  touchEnd: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//重新开启滑动事件开关</span></span><br><span class="line">    slip_event = <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//左滑事件</span></span><br><span class="line">  moveLeft() &#123;</span><br><span class="line">    <span class="keyword">let</span> page_index = <span class="keyword">this</span>.data.navbar_index + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(page_index &lt; <span class="keyword">this</span>.data.navbar.length)&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        navbar_index: page_index</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//右滑事件</span></span><br><span class="line">  moveRight() &#123;</span><br><span class="line">    <span class="keyword">let</span> page_index = <span class="keyword">this</span>.data.navbar_index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(page_index &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        navbar_index: page_index</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信小程序滑动切换样式&quot;&gt;&lt;a href=&quot;#微信小程序滑动切换样式&quot; class=&quot;headerlink&quot; title=&quot;微信小程序滑动切换样式&quot;&gt;&lt;/a&gt;微信小程序滑动切换样式&lt;/h3&gt;&lt;p&gt;之前做了一个做题的功能，用到了滑动切换上、下一题，当时没有记录，这次
      
    
    </summary>
    
      <category term="样式实现" scheme="http://yoursite.com/categories/%E6%A0%B7%E5%BC%8F%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSS3简单动画样式</title>
    <link href="http://yoursite.com/2020/06/23/CSS3%E7%AE%80%E5%8D%95%E5%8A%A8%E7%94%BB%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/06/23/CSS3简单动画样式/</id>
    <published>2020-06-23T02:23:51.000Z</published>
    <updated>2020-07-02T03:01:25.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS3简单动画样式"><a href="#CSS3简单动画样式" class="headerlink" title="CSS3简单动画样式"></a>CSS3简单动画样式</h3><h4 id="“跳动的红包”"><a href="#“跳动的红包”" class="headerlink" title="“跳动的红包”"></a>“跳动的红包”</h4><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p>微信小程序上的效果图</p><p><img src="preview.gif" alt="效果图"></p><h5 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"icon-img"</span> <span class="attr">src</span>=<span class="string">"图片地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"icon-shadow"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon-img</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">80</span>rpx;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">animation</span>: removeAnimation <span class="number">1s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon-shadow</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#888888</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">65</span>rpx;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">998</span>;</span><br><span class="line">  <span class="attribute">animation</span>: zoomAnimation <span class="number">1s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> removeAnimation &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-15rpx);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> zoomAnimation &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(1);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(0.9);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CSS3简单动画样式&quot;&gt;&lt;a href=&quot;#CSS3简单动画样式&quot; class=&quot;headerlink&quot; title=&quot;CSS3简单动画样式&quot;&gt;&lt;/a&gt;CSS3简单动画样式&lt;/h3&gt;&lt;h4 id=&quot;“跳动的红包”&quot;&gt;&lt;a href=&quot;#“跳动的红包”&quot; class
      
    
    </summary>
    
      <category term="样式实现" scheme="http://yoursite.com/categories/%E6%A0%B7%E5%BC%8F%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS递归自执行</title>
    <link href="http://yoursite.com/2020/06/16/JS%E9%80%92%E5%BD%92%E8%87%AA%E6%89%A7%E8%A1%8C/"/>
    <id>http://yoursite.com/2020/06/16/JS递归自执行/</id>
    <published>2020-06-16T06:23:28.000Z</published>
    <updated>2020-06-16T06:37:48.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS递归自执行"><a href="#JS递归自执行" class="headerlink" title="JS递归自执行"></a>JS递归自执行</h3><h4 id="调用递归函数"><a href="#调用递归函数" class="headerlink" title="调用递归函数"></a>调用递归函数</h4><p>递归函数大概就是这样的。不符合条件重新执行这个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    f(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure><h4 id="圆括号运算符和自执行函数"><a href="#圆括号运算符和自执行函数" class="headerlink" title="圆括号运算符和自执行函数"></a>圆括号运算符和自执行函数</h4><p>js中圆括号运算符指 () ，一般有两个作用。</p><p>1、在函数后面表示立即执行这个函数，如 f()</p><p>2、计算表达式，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印2</span></span><br></pre></td></tr></table></figure><p>根据 () 计算表达式的作用，来计算一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回函数本身</span></span><br></pre></td></tr></table></figure><p>根据 ()跟在函数后面表示立即执行这个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回函数本身</span></span><br></pre></td></tr></table></figure><p>当然，函数需要什么参数，() 就需要传递什么参数，和一般的函数执行方式一样</p><h4 id="函数声明的提升"><a href="#函数声明的提升" class="headerlink" title="函数声明的提升"></a>函数声明的提升</h4><p>一般的，js执行顺序是有序的，变量在未声明前使用会返回undefined，但是声明一个函数 function(){} 不同，可以在声明函数前使用它，这是因为js会把声明函数的代码优先执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS递归自执行&quot;&gt;&lt;a href=&quot;#JS递归自执行&quot; class=&quot;headerlink&quot; title=&quot;JS递归自执行&quot;&gt;&lt;/a&gt;JS递归自执行&lt;/h3&gt;&lt;h4 id=&quot;调用递归函数&quot;&gt;&lt;a href=&quot;#调用递归函数&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>css实现背景斜椭圆光束渐变</title>
    <link href="http://yoursite.com/2020/05/13/css%E5%AE%9E%E7%8E%B0%E8%83%8C%E6%99%AF%E6%96%9C%E6%A4%AD%E5%9C%86%E5%85%89%E6%9D%9F%E6%B8%90%E5%8F%98/"/>
    <id>http://yoursite.com/2020/05/13/css实现背景斜椭圆光束渐变/</id>
    <published>2020-05-13T03:25:07.000Z</published>
    <updated>2020-05-13T04:49:20.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="css实现背景斜椭圆光束渐变"><a href="#css实现背景斜椭圆光束渐变" class="headerlink" title="css实现背景斜椭圆光束渐变"></a>css实现背景斜椭圆光束渐变</h3><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="preview.jpg" alt="效果图"></p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>今天写样式时遇到一个按钮，背景中有一个倾斜的渐变光束，原型图中看出是一个扁的椭圆拉出来的渐变效果。</p><p>查了一下，找到了 <strong><a href="https://www.runoob.com/cssref/func-radial-gradient.html" target="_blank" rel="noopener">CSS radial-gradient()</a></strong> 方法，看了一下果然可行，画出一个渐变椭圆。</p><p>接着使用 <strong><a href="https://www.runoob.com/cssref/css3-pr-transform.html" target="_blank" rel="noopener">CSS3 transform</a></strong> 使它旋转，这样光束就实现了。</p><p>然后用一个容器将其包起来，超出的部分隐藏，这样就做成按钮的样式了。</p><p>由于还有文字，所以使用 <strong>z-index</strong> 调整显示层级，使其正常显示。这样整个就完成了！</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button-text"</span>&gt;</span>马上绑定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">86px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffda5f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-text</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">86px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#323232</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-bg</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">95px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffda5f</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(100% 95px at 40% 95px, #fff,#ffda5f);</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(50deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;css实现背景斜椭圆光束渐变&quot;&gt;&lt;a href=&quot;#css实现背景斜椭圆光束渐变&quot; class=&quot;headerlink&quot; title=&quot;css实现背景斜椭圆光束渐变&quot;&gt;&lt;/a&gt;css实现背景斜椭圆光束渐变&lt;/h3&gt;&lt;h4 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果
      
    
    </summary>
    
      <category term="样式实现" scheme="http://yoursite.com/categories/%E6%A0%B7%E5%BC%8F%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>js实现数组随机排序</title>
    <link href="http://yoursite.com/2020/04/13/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E9%9A%8F%E6%9C%BA%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/04/13/js实现数组随机排序/</id>
    <published>2020-04-13T01:52:48.000Z</published>
    <updated>2020-04-13T02:41:02.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js实现数组随机排序"><a href="#js实现数组随机排序" class="headerlink" title="js实现数组随机排序"></a>js实现数组随机排序</h3><h4 id="一、利用循环遍历"><a href="#一、利用循环遍历" class="headerlink" title="一、利用循环遍历"></a>一、利用循环遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr2 = arr.concat()</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">while</span>(arr2.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr2.length)</span><br><span class="line">    result = result.concat(arr2.splice(index, <span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(randomSort(arr))</span><br></pre></td></tr></table></figure><p>这种方法定义一个随机数index（因为定了向下取整，所以范围为0~arr.length）作为随机下标，然后将它对应的数从数组中取下加入到result数组中，从而实现随机排序，这种随机的随机性很好，但是代码新创建了一个数组，空间复杂度较高。</p><h4 id="二、数组sort方法"><a href="#二、数组sort方法" class="headerlink" title="二、数组sort方法"></a>二、数组sort方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomSort2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = arr.concat();</span><br><span class="line">  result.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(randomSort2(arr))</span><br></pre></td></tr></table></figure><p>这种方法是利用随机出一个正数或者负数来让数组里面的内容两两对比，是正数就是顺序，是负数则是倒序，这种方法的缺点就是随机性不高，不能完全随机，因为是两两对比，所以最后一个数在最后的可能性较大。</p><h4 id="三、洗牌算法"><a href="#三、洗牌算法" class="headerlink" title="三、洗牌算法"></a>三、洗牌算法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomSort3</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = arr.concat()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>,len = arr.length;i &lt; len; i++ )&#123;</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*len)</span><br><span class="line">    <span class="keyword">let</span> temp = result[rand]</span><br><span class="line">    result[rand] = result[i]</span><br><span class="line">    result[i] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(randomSort3(arr))</span><br></pre></td></tr></table></figure><p>洗牌算法是利用随机出的index下标对应的数，与数组从前到后相互切换，所以称为洗牌，代码运行效率比较高，随机性也很大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js实现数组随机排序&quot;&gt;&lt;a href=&quot;#js实现数组随机排序&quot; class=&quot;headerlink&quot; title=&quot;js实现数组随机排序&quot;&gt;&lt;/a&gt;js实现数组随机排序&lt;/h3&gt;&lt;h4 id=&quot;一、利用循环遍历&quot;&gt;&lt;a href=&quot;#一、利用循环遍历&quot; cla
      
    
    </summary>
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序带参数返回上一页</title>
    <link href="http://yoursite.com/2020/03/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%A6%E5%8F%82%E6%95%B0%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5/"/>
    <id>http://yoursite.com/2020/03/11/微信小程序带参数返回上一页/</id>
    <published>2020-03-11T03:32:07.000Z</published>
    <updated>2020-03-11T04:06:59.649Z</updated>
    
    <content type="html"><![CDATA[<h4 id="微信小程序带参数返回上一页"><a href="#微信小程序带参数返回上一页" class="headerlink" title="微信小程序带参数返回上一页"></a>微信小程序带参数返回上一页</h4><p>在小程序开发中，很多时候需要进入页面填写或选择一些数据，然后携带这些数据返回上一页。</p><p>这时候可以通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html" target="_blank" rel="noopener">getCurrentPages()</a> 获取上一页的页面栈，然后直接调用上一个页面Page对象的属性和方法，从而达到将数据传到上一页的目的。</p><p>通过调用上个页面的setData方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Page = getCurrentPages()[getCurrentPages().length - <span class="number">2</span>];</span><br><span class="line">Page.setData(&#123;</span><br><span class="line">  value: <span class="keyword">this</span>.page.value</span><br><span class="line">&#125;)</span><br><span class="line">wx.navigateBack(&#123;</span><br><span class="line">  delta: <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>通过缓存或者在 app.js 中设置全局变量也是可以达到带参数返回上一页的，但是通过<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html" target="_blank" rel="noopener">getCurrentPages()</a>这种方法更简单且强大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;微信小程序带参数返回上一页&quot;&gt;&lt;a href=&quot;#微信小程序带参数返回上一页&quot; class=&quot;headerlink&quot; title=&quot;微信小程序带参数返回上一页&quot;&gt;&lt;/a&gt;微信小程序带参数返回上一页&lt;/h4&gt;&lt;p&gt;在小程序开发中，很多时候需要进入页面填写或选择一些数
      
    
    </summary>
    
      <category term="问题记录" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序获取表单中n个input输入的内容</title>
    <link href="http://yoursite.com/2020/03/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95%E8%8E%B7%E5%8F%96n%E4%B8%AAinput%E8%BE%93%E5%85%A5%E7%9A%84%E5%86%85%E5%AE%B9/"/>
    <id>http://yoursite.com/2020/03/05/微信小程序提交表单获取n个input输入的内容/</id>
    <published>2020-03-05T01:28:34.000Z</published>
    <updated>2020-03-05T02:59:53.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信小程序提交表单获取n个input输入的内容"><a href="#微信小程序提交表单获取n个input输入的内容" class="headerlink" title="微信小程序提交表单获取n个input输入的内容"></a>微信小程序提交表单获取n个input输入的内容</h3><p>微信小程序需要一个可以添加和删除的输入列表，提交表单时需要将同一字段转化成字符串提交。</p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><ul><li>先定义一个列表长度的数组:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data&#123;</span><br><span class="line">  arr_number: [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入框绑定 ‘name’ ，name中的数字索引取</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form bindsubmit=&quot;formSubmit&quot;&gt;</span><br><span class="line">  &lt;view wx:for=&quot;&#123;&#123;arr_number&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;name&#123;&#123;index&#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;/input&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li>提交表单时遍历 ‘arr_name’ ，取出所有 ‘input’ 对应的内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">formSubmit: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> names = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.data.arr_number.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.detail.value[<span class="string">"name"</span> + i])&#123;</span><br><span class="line">      names.push(e.detail.value[<span class="string">"name"</span> + i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><ul><li>输入框绑定 ‘id’ , ‘id’ 取数组索引，绑定同一事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;arr_number&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line">  &lt;input bindinput=&quot;nameInput&quot; id=&quot;&#123;&#123;index&#125;&#125;&quot; value=&quot;&#123;&#123;arr_name[index]&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;/input&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data&#123;</span><br><span class="line">  arr_number: [<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">  arr_name: [<span class="string">''</span>,<span class="string">''</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入框输入内容时触发事件，获取对应输入框 ‘id’ ，就可以实时绑定输入值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nameInput: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name_index = <span class="string">'arr_name['</span>+e.currentTarget.id+<span class="string">']'</span></span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    [name_index]: e.detail.value</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.data.arr_name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>第一种方法存在一个问题就是没有实施保存输入的数据，如果需要对数组做一些操作的话会影响输入框的内容。第二种方法是实施绑定输入的内容，添加和删除输入框列表长度不会影响输入框的值，更灵活。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信小程序提交表单获取n个input输入的内容&quot;&gt;&lt;a href=&quot;#微信小程序提交表单获取n个input输入的内容&quot; class=&quot;headerlink&quot; title=&quot;微信小程序提交表单获取n个input输入的内容&quot;&gt;&lt;/a&gt;微信小程序提交表单获取n个inpu
      
    
    </summary>
    
      <category term="问题记录" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>ES6将Json对象处理成一个特定格式字符串</title>
    <link href="http://yoursite.com/2020/01/07/ES6%E5%B0%86Json%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86%E6%88%90%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2020/01/07/ES6将Json对象处理成一个特定格式字符串/</id>
    <published>2020-01-07T08:53:53.000Z</published>
    <updated>2020-01-07T09:23:13.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES6将Json对象处理成一个特定格式字符串"><a href="#ES6将Json对象处理成一个特定格式字符串" class="headerlink" title="ES6将Json对象处理成一个特定格式字符串"></a>ES6将Json对象处理成一个特定格式字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = &#123;<span class="attr">a</span>:<span class="string">'1'</span>, <span class="attr">b</span>:<span class="string">'2'</span>, <span class="attr">c</span>:<span class="string">'3'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> params = <span class="built_in">Object</span>.keys(json).map(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(json[key]);</span><br><span class="line">&#125;).join(<span class="string">"&amp;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(params)</span><br><span class="line"></span><br><span class="line"><span class="comment">//a=1&amp;b=2&amp;c=3</span></span><br></pre></td></tr></table></figure><p><strong>Object.keys(obj)</strong><br>获取对象自身所有的可枚举的属性值，返回一个由属性名组成的字符串数组</p><p><strong>map()</strong><br>处理返回一个新数组</p><p><strong>join()</strong><br>拼接成字符串</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ES6将Json对象处理成一个特定格式字符串&quot;&gt;&lt;a href=&quot;#ES6将Json对象处理成一个特定格式字符串&quot; class=&quot;headerlink&quot; title=&quot;ES6将Json对象处理成一个特定格式字符串&quot;&gt;&lt;/a&gt;ES6将Json对象处理成一个特定格式字
      
    
    </summary>
    
      <category term="问题记录" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Json" scheme="http://yoursite.com/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>JS判断对象中所有属性是否为空</title>
    <link href="http://yoursite.com/2020/01/07/JS%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
    <id>http://yoursite.com/2020/01/07/JS判断对象中所有属性是否为空/</id>
    <published>2020-01-07T08:27:46.000Z</published>
    <updated>2020-01-07T08:55:20.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS判断对象中所有属性是否为空"><a href="#JS判断对象中所有属性是否为空" class="headerlink" title="JS判断对象中所有属性是否为空"></a>JS判断对象中所有属性是否为空</h3><p>微信小程序表单。将组件内的用户输入的switch input checkbox slider radio picker 提交。<br>当点击 form 表单中 form-type 为 submit 的 button 组件时，会将表单组件中的 value 值进行提交，需要在表单组件中加上 name 来作为 key。</p><p>提交的数据为  <strong>键:值</strong>  对象，判断是否所有选项都已填写时，可以直接判断对象所有属性是否为空。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params">ObjectValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="keyword">new</span> <span class="built_in">Boolean</span>()</span><br><span class="line">  flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> ObjectValue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ObjectValue[key]) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS判断对象中所有属性是否为空&quot;&gt;&lt;a href=&quot;#JS判断对象中所有属性是否为空&quot; class=&quot;headerlink&quot; title=&quot;JS判断对象中所有属性是否为空&quot;&gt;&lt;/a&gt;JS判断对象中所有属性是否为空&lt;/h3&gt;&lt;p&gt;微信小程序表单。将组件内的用户输入的
      
    
    </summary>
    
      <category term="问题记录" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端跨域问题</title>
    <link href="http://yoursite.com/2019/08/11/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/08/11/前端跨域问题/</id>
    <published>2019-08-11T01:37:17.000Z</published>
    <updated>2019-08-11T03:36:50.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>跨域，是由于浏览器为了保障安全的同源策略限制，不能执行其他网站的脚本。只要协议、域名、端口有任何一个不同，就会被当作是不同的域。</p><p>由于在工程中，不同职责的服务分散在不同的工程中，往往这些工程的域名是不同的，但一个需求可能需要对应到多个服务，这时便需要调用不同服务的接口，因此会出现跨域。</p><h2 id="如何实现跨域"><a href="#如何实现跨域" class="headerlink" title="如何实现跨域"></a>如何实现跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>浏览器只对XHR(XMLHttpRequest)请求有同源请求限制，而对script标签src属性、link标签ref属性和img标签src属性没有这这种限制，利用这个“漏洞”就可以很好的解决跨域请求。JSONP就是利用了script标签无同源限制的特点来实现的，当向第三方站点请求时，我们可以将此请求放在<code>&lt;script&gt;</code>标签的src属性里。</p><ul><li>优点：兼容性好（兼容低版本IE）</li><li>缺点：1.JSONP只支持GET请求； 2.它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</li></ul><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS（Cross-Origin Resource Sharing）跨域资源共享，定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。<br>目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p><p>CORS与JSONP的使用目的相同，但是比JSONP更强大，CORS支持所有类型的HTTP请求。</p><p>了解更多可以参考：<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享CORS详解</a></p><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><p>postMessage是HTML5新增的一个解决跨域的一个方法。postMessage()方法可以允许来自不同域的脚本异步方式通信，可以实现跨文本、多窗口、跨域的消息传递。</p><p>例：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otherWindow.postMessage(message,targetOrigin);</span><br></pre></td></tr></table></figure><ul><li>otherWindow指的是目标窗口，也就是要给哪一个window发送消息，是window.frames属性的成员或者是window.open方法创建的窗口</li><li>Message是要发送的消息，类型为String，Object(IE8、9不支持Obj)</li><li>targetOrigin是限定消息接受范围，不限制就用星号 *</li></ul><p>A页面通过postMessage方法发送消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);  </span><br><span class="line">    <span class="keyword">var</span> targetOrigin = <span class="string">"http://www.google.com"</span>;  </span><br><span class="line">    ifr.contentWindow.postMessage(<span class="string">'hello world!'</span>, targetOrigin);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>B页面通过message事件监听并接受消息:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> data = event.data;<span class="comment">//消息  </span></span><br><span class="line">    <span class="keyword">var</span> origin = event.origin;<span class="comment">//消息来源地址  </span></span><br><span class="line">    <span class="keyword">var</span> source = event.source;<span class="comment">//源Window对象  </span></span><br><span class="line">    <span class="keyword">if</span>(origin==<span class="string">"http://www.baidu.com"</span>)&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(data);<span class="comment">//hello world!  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.addEventListener != <span class="string">'undefined'</span>) &#123;  </span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, onmessage, <span class="literal">false</span>);  </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.attachEvent != <span class="string">'undefined'</span>) &#123;  </span><br><span class="line">    <span class="comment">//for ie  </span></span><br><span class="line">    <span class="built_in">window</span>.attachEvent(<span class="string">'onmessage'</span>, onmessage);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>稍微了解了三种比较常用的实现跨域的方法，还有一些方法之后再了解一下补上。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://juejin.im/post/59c132415188256bb018e825" target="_blank" rel="noopener">跨域</a></li><li><a href="https://juejin.im/post/5b5ff1dfe51d4519610e26ec" target="_blank" rel="noopener">跨域总结</a></li><li><a href="https://juejin.im/post/5815f4abbf22ec006893b431#heading-9" target="_blank" rel="noopener">前端跨域整理</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h1&gt;&lt;h2 id=&quot;什么是跨域&quot;&gt;&lt;a href=&quot;#什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域&quot;&gt;&lt;/a&gt;什么是跨
      
    
    </summary>
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="JSONP" scheme="http://yoursite.com/tags/JSONP/"/>
    
      <category term="CORS" scheme="http://yoursite.com/tags/CORS/"/>
    
      <category term="getMessage" scheme="http://yoursite.com/tags/getMessage/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://yoursite.com/2019/07/12/Flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2019/07/12/Flex布局/</id>
    <published>2019-07-12T04:37:05.000Z</published>
    <updated>2020-07-10T02:10:57.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><p>2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p><img src="BrowserSupport.jpg" alt="BrowserSupport"></p><h2 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为Flex布局:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用Flex布局:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webkit内核的浏览器，必须加上-webkit前缀:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p><p><img src="flex_container.png" alt="flex_container"></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h3><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="flex_direction.png" alt="flex-direction"></p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h3 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p><p><img src="flex_wrap.png" alt="flex-wrap"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1) nowrap（默认）：不换行。<br>(2) wrap：换行，第一行在上方。<br>(3) wrap-reverse：换行，第一行在下方。</p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="justify_content.png" alt="justify-content"></p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h3 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h3><p>align-items属性定义项目在交叉轴上如何对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="align_items.png" alt="align-items"></p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="align_content.png" alt="align-content"></p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h3><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="order.png" alt="order"></p><h3 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h3><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="flex_grow.png" alt="flex-grow"></p><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h3><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="flex_shrink.jpg" alt="flex-shrink"></p><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h3><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h3 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h3><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="align_self.png" alt="align-self"></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><blockquote><p>来源：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flex布局&quot;&gt;&lt;a href=&quot;#Flex布局&quot; class=&quot;headerlink&quot; title=&quot;Flex布局&quot;&gt;&lt;/a&gt;Flex布局&lt;/h1&gt;&lt;p&gt;2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="Flex" scheme="http://yoursite.com/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点整理</title>
    <link href="http://yoursite.com/2019/07/08/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/08/前端知识点整理/</id>
    <published>2019-07-08T03:55:04.000Z</published>
    <updated>2019-08-11T01:39:28.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端知识点整理"><a href="#前端知识点整理" class="headerlink" title="前端知识点整理"></a>前端知识点整理</h1><h2 id="Doctype作用？标准模式与兼容模式各有什么区别？"><a href="#Doctype作用？标准模式与兼容模式各有什么区别？" class="headerlink" title="Doctype作用？标准模式与兼容模式各有什么区别？"></a>Doctype作用？标准模式与兼容模式各有什么区别？</h2><ul><li><code>&lt;!DOCTYPE&gt;</code>声明位于位于HTML文档中的第一行，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</li><li>标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</li></ul><h2 id="lt-img-gt-的-title-和-alt-有什么区别？"><a href="#lt-img-gt-的-title-和-alt-有什么区别？" class="headerlink" title="&lt;img&gt; 的 title 和 alt 有什么区别？"></a><code>&lt;img&gt;</code> 的 title 和 alt 有什么区别？</h2><ul><li>title 是全局属性之一，用于为元素提供附加的信息。通常当鼠标滑动到元素上时显示。</li><li>alt 是 <code>&lt;img&gt;</code> 的特有属性，是图片内容的等价描述，用于图片无法加载时显示，可提高图片可访问性，除了纯装饰图片之外都必须设置有意义的值。</li></ul><h2 id="行内元素有哪些？块级元素有哪些？空-void-元素有那些？"><a href="#行内元素有哪些？块级元素有哪些？空-void-元素有那些？" class="headerlink" title="行内元素有哪些？块级元素有哪些？空(void)元素有那些？"></a>行内元素有哪些？块级元素有哪些？空(void)元素有那些？</h2><p>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。</p><ul><li>行内元素有：a　b　span　img　input　select　strong（强调的语气）</li><li>块级元素有：div　ul　ol　li　dl　dt　dd　h1　h2　h3　h4…　p</li><li>常见的空元素：<code>&lt;br&gt;　&lt;hr&gt;　&lt;img&gt;　&lt;input&gt;　&lt;link&gt;　&lt;meta&gt;</code></li></ul><h2 id="页面导入样式时，使用link和-import有什么区别？"><a href="#页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="页面导入样式时，使用link和@import有什么区别？"></a>页面导入样式时，使用link和@import有什么区别？</h2><ul><li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li><li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。</li></ul><h2 id="介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"><a href="#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？" class="headerlink" title="介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"></a>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h2><ul><li>有两种， IE 盒子模型、W3C 盒子模型；</li><li>盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；</li><li>区  别： IE的content部分把 border 和 padding计算了进去;</li></ul><h2 id="CSS-sprite"><a href="#CSS-sprite" class="headerlink" title="CSS sprite"></a>CSS sprite</h2><ul><li>概念：将多个小图片拼接到一个图片中。通过background-position和元素尺寸调节需要显示的背景图案。</li><li>优点：<ul><li>减少HTTP请求数，极大地提高页面加载速度</li><li>增加图片信息重复度，提高压缩比，减少图片大小</li><li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li></ul></li><li>缺点：<ul><li>图片合并麻烦</li><li>维护麻烦，修改一个图片可能需要重新布局整个图片、样式</li></ul></li></ul><h2 id="display-none-与-visibility-hidden"><a href="#display-none-与-visibility-hidden" class="headerlink" title="display:none; 与 visibility:hidden"></a><code>display:none;</code> 与 <code>visibility:hidden</code></h2><ul><li>它们都能让元素不可见</li><li><code>display:none;</code> 会让元素完全从渲染树中消失，渲染的时候不占据任何空间；<code>visibility:hidden;</code> 不会让元素从渲染树消失，渲染树元素继续占据空间，只是内容不可见。</li><li><code>display:none;</code> 是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；<code>visibility:hidden;</code> 是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显示。</li><li>修改常规流中元素的display通常会造成文档重排。修改visibility属性只会造成本元素的重绘。</li><li>读屏器不会读取 <code>display:none;</code> 元素内容；会读取 <code>visibility:hidden;</code>元素内容.</li></ul><h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><ul><li>HTTP：超文本传输协议，互联网上应用最广泛的一种网络协议，是一个客户端和服务器端请求和响应的标准。</li><li>HTTPS：HTTP的安全版，有一个确保数据传输的信息安全通道SSL协议。</li></ul><h2 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h2><ol><li><p>一台服务器要与HTTP1.1兼容，只要为资源实现GET和HEAD方法即可。</p></li><li><p>GET是最常用的方法，通常用于请求服务器发送某个资源。</p></li><li><p>HEAD方法与GET类似，但服务器在响应中只返回首部，不返回实体的主体部分。</p></li><li><p>PUT方法让服务器用请求的主体部分来创建一个由所请求的URL命名的新文档，或者，如果那个URL已经存在的话，就用这个主体替代它。</p></li><li><p>POST方法起初是用来向服务器输入数据的。实际上，通常会用它来支持HTML的表单，表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。</p></li><li><p>TRACE方法会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个TRACE响应并在响应主体中携带它收到的原始请求报文。TRACE方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。</p></li><li><p>OPTIONS方法请求web服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。</p></li><li><p>DELETE方法请求服务器删除请求URL指定的资源。</p></li></ol><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ol><li><p>减少HTTP请求</p></li><li><p>使用CDN</p><p>CDN（内容发布网络）是一组分布在多个不同地理位置的Web服务器，用于更加有效地向用户发布内容。在优化性能时，向特定用户发布内容的服务器的选择基于对网络慕课拥堵的测量。例如，CDN可能选择网络阶跃数最小的服务器，或者具有最短响应时间的服务器。</p></li><li><p>添加Expires头</p><p>页面的初次访问者会进行很多HTTP请求，但是通过使用一个长久的Expires头，可以使这些组件被缓存，下次访问的时候，就可以减少不必要的HTPP请求，从而提高加载速度。</p></li><li><p>压缩组件</p><p>从HTTP1.1开始，Web客户端可以通过HTTP请求中的Accept-Encoding头来表示对压缩的支持<br>如果Web服务器看到请求中有这个头，就会使用客户端列出来的方法中的一种来进行压缩。Web服务器通过响应中的Content-Encoding来通知 Web客户端。</p></li><li><p>将CSS样式表放在头部</p><p>将样式表放在头部对于实际页面加载的时间并不能造成太大影响，但是这会减少页面首屏出现的时间，使页面内容逐步呈现，改善用户体验，防止“白屏”。</p></li><li><p>将JavaScript脚本放在底部</p><p>脚本放在底部对于实际页面加载的时间并不能造成太大影响，但是这会减少页面首屏出现的时间，使页面内容逐步呈现。</p></li><li><p>避免CSS表达式</p></li><li><p>使用外部的JavaScript和CSS</p><p>当脚本或者样式是从外部引入的文件，浏览器就有可能缓存它们，从而在以后加载的时候能够直接使用缓存，而HTML文档的大小减小，从而提高加载速度。</p></li><li><p>精简JavaScript和CSS</p><p>精简就是从代码中移除不必要的字符以减少文件大小，降低加载的时间。</p></li><li><p>可缓存的Ajax</p><p>在进行Ajax请求的时候，可以选择尽量使用get方法，这样可以使用客户端的缓存，提高请求速度。</p></li></ol><h2 id="MVC与MVVM"><a href="#MVC与MVVM" class="headerlink" title="MVC与MVVM"></a>MVC与MVVM</h2><p>MVVM 是 Model-View-ViewModel 的缩写。<br>Model代表数据模型，View代表UI视图，ViewModel是用来连接View和Model的桥梁。<br>在MVVM架构下，View和Model之间并没有直接的联系，而是通过ViewModel进行交互，Model和ViewModel之间的交互是双向的，因此View数据的变化会同步到Model中，而Model数据的变化也会立即反应到View上。这实际实际上就是数据的双向绑定。</p><p><img src="MVC与MVVM.jpg" alt="MVC与MVVM"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端知识点整理&quot;&gt;&lt;a href=&quot;#前端知识点整理&quot; class=&quot;headerlink&quot; title=&quot;前端知识点整理&quot;&gt;&lt;/a&gt;前端知识点整理&lt;/h1&gt;&lt;h2 id=&quot;Doctype作用？标准模式与兼容模式各有什么区别？&quot;&gt;&lt;a href=&quot;#Doctype
      
    
    </summary>
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>CSS笔记</title>
    <link href="http://yoursite.com/2019/06/29/CSS3%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/29/CSS3笔记/</id>
    <published>2019-06-29T13:26:52.000Z</published>
    <updated>2020-07-10T02:09:28.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS学习笔记"><a href="#CSS学习笔记" class="headerlink" title="CSS学习笔记"></a>CSS学习笔记</h1><h2 id="CSS3新增背景样式"><a href="#CSS3新增背景样式" class="headerlink" title="CSS3新增背景样式"></a>CSS3新增背景样式</h2><ul><li>background-size：规定背景图片的尺寸</li><li>background-origin：规定背景图片的定位区域</li><li>background-clip：规定背景的绘制区域</li></ul><h2 id="CSS3新增文本效果"><a href="#CSS3新增文本效果" class="headerlink" title="CSS3新增文本效果"></a>CSS3新增文本效果</h2><ul><li>text-shadow：向文本添加阴影</li><li>word-wrap：规定文本的换行规则</li></ul><h2 id="CSS链接样式"><a href="#CSS链接样式" class="headerlink" title="CSS链接样式"></a>CSS链接样式</h2><p>CSS链接的四种状态：</p><ol><li>a:link  普通的、未被访问的链接</li><li>a:visited  用户已访问的链接</li><li>a:hover  鼠标指针位于链接上方</li><li>a:active  链接被点击的时刻</li></ol><p>text-decoration: 大多用于去掉链接中的下划线</p><h2 id="CSS列表样式"><a href="#CSS列表样式" class="headerlink" title="CSS列表样式"></a>CSS列表样式</h2><ul><li>list-style-type: 列表类型</li><li>list-style-image: 列表项图像</li></ul><h2 id="定位Position"><a href="#定位Position" class="headerlink" title="定位Position"></a>定位Position</h2><ul><li>position:relative  相对定位，相对于其正常位置进行定位</li><li>position:absolute  绝对定位，相对于static定位以外的第一个父元素进行定位</li><li>position:fixed  固定定位，相对于浏览器窗口进行定位</li><li>position:static    默认值。没有定位，元素出现在正常的流中</li><li>inherit    规定应该从父元素继承 position 属性的值</li></ul><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>Flex是Flexible Box的缩写，顾名思义为“弹性布局”，用来为盒装模型提供最大的灵活性。</p><p><a href="http://www.nakuyk.top/2019/07/12/Flex%E5%B8%83%E5%B1%80/" target="_blank" rel="noopener">Flex布局详细内容</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS学习笔记&quot;&gt;&lt;a href=&quot;#CSS学习笔记&quot; class=&quot;headerlink&quot; title=&quot;CSS学习笔记&quot;&gt;&lt;/a&gt;CSS学习笔记&lt;/h1&gt;&lt;h2 id=&quot;CSS3新增背景样式&quot;&gt;&lt;a href=&quot;#CSS3新增背景样式&quot; class=&quot;head
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue+webpack打造TODO应用</title>
    <link href="http://yoursite.com/2019/03/12/Vue-webpack%E6%89%93%E9%80%A0TODO%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/12/Vue-webpack打造TODO应用/</id>
    <published>2019-03-12T06:37:54.000Z</published>
    <updated>2020-07-10T02:10:42.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-webpack打造TODO应用"><a href="#Vue-webpack打造TODO应用" class="headerlink" title="Vue+webpack打造TODO应用"></a>Vue+webpack打造TODO应用</h1><blockquote><p>此项目基于慕课网Jokcy老师的<a href="https://www.imooc.com/learn/935" target="_blank" rel="noopener">Vue+Webpack打造todo应用</a>视频教程编写。</p></blockquote><h4 id="地址：https-github-com-nakuYK-TODO"><a href="#地址：https-github-com-nakuYK-TODO" class="headerlink" title="地址：https://github.com/nakuYK/TODO"></a><strong>地址：<a href="https://github.com/nakuYK/TODO" target="_blank" rel="noopener">https://github.com/nakuYK/TODO</a></strong></h4><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Vue：2.6.8<br>webpack：4.29.6</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在webpack版本4.0.0以上，某些API发生了更改，所以源码和Jokcy老师的会有所不同。如果你是webpack版本4.0.0以上，可以参考一下我的源码。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>此项目首先完成一个前端工程的配置，通过webpack搭建一个完善的vue的workflow，然后基于Vue实现TODO的简单功能，并涵盖了vue的.vue文件以及jsx的开发模式的了解。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><pre><code>git clone https://github.com/nakuYK/TODO.git </code></pre><h3 id="安装npm依赖"><a href="#安装npm依赖" class="headerlink" title="安装npm依赖"></a>安装npm依赖</h3><pre><code>npm install</code></pre><h3 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h3><p>进入项目目录</p><pre><code>npm run dev</code></pre><h3 id="浏览器预览"><a href="#浏览器预览" class="headerlink" title="浏览器预览"></a>浏览器预览</h3><pre><code>localhost:8000</code></pre><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="picture.jpg" alt="预览"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-webpack打造TODO应用&quot;&gt;&lt;a href=&quot;#Vue-webpack打造TODO应用&quot; class=&quot;headerlink&quot; title=&quot;Vue+webpack打造TODO应用&quot;&gt;&lt;/a&gt;Vue+webpack打造TODO应用&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="项目练习" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记</title>
    <link href="http://yoursite.com/2019/03/06/ES6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/06/ES6笔记/</id>
    <published>2019-03-06T08:52:34.000Z</published>
    <updated>2020-07-10T02:09:40.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6学习笔记"><a href="#ES6学习笔记" class="headerlink" title="ES6学习笔记"></a>ES6学习笔记</h1><h2 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h2><p>ES6 新增加了两个重要的 JavaScript 关键字: let 和 const。</p><p><strong>let</strong>声明的变量只在 let 命令所在的代码块内有效，不能重复声明，不存在变量提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">"apple"</span>;</span><br></pre></td></tr></table></figure><p>变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。</p><p><strong>const</strong>声明一个只读的常量，一旦声明，常量的值就不能改变。<br>const虽然是常量，不允许修改默认赋值，但如果定义的是对象object，那么可以修改对象内部的属性值。const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type = &#123;</span><br><span class="line">  a:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">type.a = <span class="number">2</span> <span class="comment">//没有直接修改type的值，而只是修改type.a的属性值，这是允许的。</span></span><br><span class="line"><span class="built_in">console</span>.log(type) <span class="comment">//&#123;a:2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ES6-块级作用域"><a href="#ES6-块级作用域" class="headerlink" title="ES6 块级作用域"></a>ES6 块级作用域</h2><p>ES6引入了块级作用域<code>{}</code>，明确允许在块级作用域中声明函数。<br>块级作用域中，函数声明语句的行为类似于let，在块级作用域之外，不可以引用。</p><h2 id="ES6-Symbol"><a href="#ES6-Symbol" class="headerlink" title="ES6 Symbol"></a>ES6 Symbol</h2><p>ES6 引入了一种新的原始数据类型 Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名。<br>Symbol 函数栈不能用 new 命令，因为 Symbol 是原始数据类型，不是对象。可以接受一个字符串作为参数，为新创建的 Symbol 提供描述，用来显示在控制台或者作为字符串的时候使用，便于区分。</p><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>ES6引入了模板字符串，用反引号来表示，可以表示多行字符串以及做到文本插值(利用模板占位符)。</p><p>没有模板字符串的换行需要加换行符\n；<br>有了模板字符串之后可以直接换行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello\nworld"</span>);</span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello</span></span><br><span class="line"><span class="string">world`</span>);</span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br></pre></td></tr></table></figure><p>可以用${}来表示模板占位符，可以将你已经定义好的变量传进括弧中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"Jane"</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">22</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, I'am <span class="subst">$&#123;name&#125;</span>, my age is <span class="subst">$&#123;age&#125;</span>.`</span>)</span><br><span class="line"><span class="comment">// Hello, I'am Jane, my age is 22.</span></span><br></pre></td></tr></table></figure><h2 id="ES6-对象"><a href="#ES6-对象" class="headerlink" title="ES6 对象"></a>ES6 对象</h2><p>ES6允许对象的属性直接写变量，这时候属性名是变量名，属性值是变量值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Amy"</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;age, name&#125;;</span><br><span class="line">person   <span class="comment">//&#123;age: 12, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure><p>方法名也可以简写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  sayHi()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hi"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.sayHi();  <span class="comment">//"Hi"</span></span><br></pre></td></tr></table></figure><h2 id="ES6-函数"><a href="#ES6-函数" class="headerlink" title="ES6 函数"></a>ES6 函数</h2><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name,age=<span class="number">17</span></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(name+<span class="string">","</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">"Amy"</span>,<span class="number">18</span>);  <span class="comment">// Amy,18</span></span><br><span class="line">fn(<span class="string">"Amy"</span>,<span class="string">""</span>);  <span class="comment">// Amy,</span></span><br><span class="line">fn(<span class="string">"Amy"</span>);     <span class="comment">// Amy,17</span></span><br></pre></td></tr></table></figure><h3 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h3><p>不定参数用来表示不确定参数个数，形如，…变量名，由…加上一个具名参数标识符组成。具名参数只能放在参数组的最后，并且有且只有一个不定参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);      <span class="comment">//2</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);  <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  alert(<span class="string">'abc'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果只有一个参数，()可以省</li><li>如果只有一个return，{}可以省</li></ul><p>将外部 this 传递到回调函数中，有了箭头函数，直接使用 this 就行。</p><h2 id="ES6-Class-类"><a href="#ES6-Class-类" class="headerlink" title="ES6 Class 类"></a>ES6 Class 类</h2><p>在ES6中，class (类)作为对象的模板被引入，可以通过 class 关键字定义类。<br>class 的本质是 function。<br>注意要点：不可重复声明；类定义不会被提升；类中方法不需要 function 关键字；方法间不能加分号。</p><h2 id="模块功能"><a href="#模块功能" class="headerlink" title="模块功能"></a>模块功能</h2><h3 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h3><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个 JS 文件，里面使用export命令输出变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br></pre></td></tr></table></figure><p>上面代码是profile.js文件，保存了用户信息。ES6 将其视为一个模块，里面用export命令对外部输出了三个变量。<br>export的写法，除了像上面这样，还有另外一种。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure><p>export命令除了输出变量，还可以输出函数或类（class）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码对外输出一个函数multiply。</p><p>通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码使用as关键字，重命名了函数v1和v2的对外接口。重命名后，v2可以用不同的名字输出两次。</p><p>另外，export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> foo = <span class="string">'baz'</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>上面代码输出变量foo，值为bar，500 毫秒之后变成baz。</p><p>最后，export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'bar'</span> <span class="comment">// SyntaxError</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>上面代码中，export语句放在函数之中，结果报错。</p><h3 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h3><p>使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.textContent = firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的import命令，用于加载profile.js文件，并从中输入变量。import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</p><p>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</span><br></pre></td></tr></table></figure><p>import命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line">a = &#123;&#125;; <span class="comment">// Syntax Error : 'a' is read-only;</span></span><br></pre></td></tr></table></figure><p>上面代码中，脚本加载了变量a，对其重新赋值就会报错，因为a是一个只读的接口。但是，如果a是一个对象，改写a的属性是允许的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line">a.foo = <span class="string">'hello'</span>; <span class="comment">// 合法操作</span></span><br></pre></td></tr></table></figure><p>上面代码中，a的属性可以成功改写，并且其他模块也可以读到改写后的值。不过，这种写法很难查错，建议凡是输入的变量，都当作完全只读，轻易不要改变它的属性。</p><p>import后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。</p><p>注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br></pre></td></tr></table></figure><p>上面的代码不会报错，因为import的执行早于foo的调用。这种行为的本质是，import命令是编译阶段执行的，在代码运行之前。</p><p>由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="string">'f'</span> + <span class="string">'oo'</span> &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">module</span> = <span class="string">'my_module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="built_in">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'module1'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'module2'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面三种写法都会报错，因为它们用到了表达式、变量和if结构。在静态分析阶段，这些语法都是没法得到值的。</p><p>最后，import语句会执行所加载的模块，因此可以有下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lodash'</span>;</span><br></pre></td></tr></table></figure><p>上面代码仅仅执行lodash模块，但是不输入任何值。</p><p>如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。</p><h3 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h3><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</span><br><span class="line"><span class="comment">// 从circle中加载所有输出值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6学习笔记&quot;&gt;&lt;a href=&quot;#ES6学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ES6学习笔记&quot;&gt;&lt;/a&gt;ES6学习笔记&lt;/h1&gt;&lt;h2 id=&quot;let-与-const&quot;&gt;&lt;a href=&quot;#let-与-const&quot; class=&quot;he
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery笔记</title>
    <link href="http://yoursite.com/2019/02/26/jQuery%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/26/jQuery笔记/</id>
    <published>2019-02-26T07:17:53.000Z</published>
    <updated>2020-07-10T02:10:44.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>jQuery是一个JavaScript函数库。<br>jQuery是一个轻量级的”写的少，做的多”的JavaScript库。<br>jQuery库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities  </li></ul><p>除此之外，Jquery还提供了大量的插件。</p><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><p>jQuery 选择器允许对 HTML 元素组或单个元素进行操作。<br>jQuery 选择器基于元素的id、类、类型、属性、属性值等”查找”（或选择）HTML元素。它基于已经存在的CSS选择器，除此之外，它还有一些自定义的选择器。<br>jQuery 中所有选择器都以美元符号开头：$()。</p><h2 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h2><p>常见 DOM 事件：</p><ul><li>click() 方法是当按钮点击事件被触发时会调用一个函数。</li><li>dblclick() 当双击元素时，会发生 dblclick 事件。</li><li>mouseenter() 当鼠标指针穿过元素时，会发生 mouseenter 事件。</li><li>mouseleave() 当鼠标指针离开元素时，会发生 mouseleave 事件。</li><li>mousedown() 当鼠标指针移动到元素上方，并按下鼠标按键时，会发生    mousedown 事件。</li><li>mouseup() 当在元素上松开鼠标按钮时，会发生 mouseup 事件。</li><li>hover() 方法用于模拟光标悬停事件。也就是同时具有mouseenter()和mouseleave()。</li><li>focus() 当元素获得焦点时，发生 focus 事件。</li><li>blur() 当元素失去焦点时，发生 blur 事件。</li></ul><h2 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h2><ul><li>hide()和show()方法来隐藏和显示 HTML 元素。toggle()方法可以切换hide()和 how()方法。（可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>fadeIn()和fadeOut()方法用来淡入已隐藏元素和淡出可见元素。fadeToggle()方法可以在它们之间切换。（可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>fadeTo()方法允许渐变为给定的不透明度（值介于0与1之间）。（可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>slideDown()和slideUp()用于向下滑出和向上滑入元素。slideToggle()方法以在它们之间切换。（可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>animate()方法用于自定义CSS属性。可实现动画效果。（必需的params参数定义形成动画的CSS属性；可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>stop()方法用于停止动画或效果，在它们完成之前。stop()方法适用于所有jQuery效果函数，包括滑动、淡入淡出和自定义动画。（可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。）</li></ul><p><strong>在一条语句中允许运行多个 jQuery 方法（在相同的元素上）。</strong></p><h2 id="jQuery-HTML"><a href="#jQuery-HTML" class="headerlink" title="jQuery HTML"></a>jQuery HTML</h2><h3 id="获得和设置内容"><a href="#获得和设置内容" class="headerlink" title="获得和设置内容"></a>获得和设置内容</h3><ul><li>text() 方法用于设置或返回所选元素的文本内容</li><li>html() 方法用于设置或返回所选元素的内容（包括 HTML 标记）</li><li>val() 方法用于设置或返回表单字段的值</li><li>attr() 方法用于获取属性值</li></ul><h3 id="添加内容-元素"><a href="#添加内容-元素" class="headerlink" title="添加内容/元素"></a>添加内容/元素</h3><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul><h3 id="删除内容-元素"><a href="#删除内容-元素" class="headerlink" title="删除内容/元素"></a>删除内容/元素</h3><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul><h3 id="操作-CSS"><a href="#操作-CSS" class="headerlink" title="操作 CSS"></a>操作 CSS</h3><ul><li>addClass() - 向被选元素添加一个或多个类</li><li>removeClass() - 从被选元素删除一个或多个类</li><li>toggleClass() - 对被选元素进行添加/删除类的切换操作</li><li>css() - 设置或返回样式属性</li></ul><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><ul><li>width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）</li><li>height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）</li><li>innerWidth() 方法返回元素的宽度（包括内边距）</li><li>innerHeight() 方法返回元素的高度（包括内边距）</li><li>outerWidth() 方法返回元素的宽度（包括内边距和边框）</li><li>outerHeight() 方法返回元素的高度（包括内边距和边框）</li></ul><h2 id="jQuery-遍历"><a href="#jQuery-遍历" class="headerlink" title="jQuery 遍历"></a>jQuery 遍历</h2><h3 id="向上遍历"><a href="#向上遍历" class="headerlink" title="向上遍历"></a>向上遍历</h3><ul><li>parent() 方法返回被选元素的直接父元素。</li><li>parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<code>&lt;html&gt;</code>)。</li><li>parentsUntil() 方法返回介于两个给定元素之间的所有<strong>祖先</strong>元素。</li></ul><h3 id="向下遍历"><a href="#向下遍历" class="headerlink" title="向下遍历"></a>向下遍历</h3><ul><li>children() 方法返回被选元素的所有直接子元素。</li><li>find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。</li></ul><h3 id="同级遍历"><a href="#同级遍历" class="headerlink" title="同级遍历"></a>同级遍历</h3><ul><li>siblings() 方法返回被选元素的所有同级元素。</li><li>next() 方法返回被选元素的下一个同级元素。</li><li>nextAll() 方法返回被选元素的所有跟随的同级元素。</li><li>nextUntil() 方法返回介于两个给定参数之间的所有跟随的同级元素。</li><li>prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同级元素（在 DOM 树中沿着同级之前元素遍历，而不是之后元素遍历）。</li></ul><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><ul><li>first() 方法返回被选元素的首个元素。</li><li>last() 方法返回被选元素的最后一个元素。</li><li>eq() 方法返回被选元素中带有指定索引号的元素。（指定参数索引）</li><li>filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。（指定参数）</li><li>not() 方法返回不匹配标准的所有元素。与filter() 相反。</li></ul><h2 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery AJAX"></a>jQuery AJAX</h2><p>AJAX 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。<br>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。<br>load() 方法从服务器加载数据，并把返回的数据放入被选元素中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).load(URL,data,callback);</span><br></pre></td></tr></table></figure><p>$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(URL,callback);</span><br></pre></td></tr></table></figure><p>$.post() 方法通过 HTTP POST 请求向服务器提交数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(URL,data,callback);</span><br></pre></td></tr></table></figure><h2 id="jQuery-noConflict-方法"><a href="#jQuery-noConflict-方法" class="headerlink" title="jQuery - noConflict() 方法"></a>jQuery - noConflict() 方法</h2><p>jQuery 使用 $ 符号作为 jQuery 的简写。<br>如果其他 JavaScript 框架也使用 $ 符号作为简写，有可能导致脚本停止运行。<br>noConflict() 方法会释放对 $ 标识符的控制，这样其他脚本就可以使用它了。<br>可以通过全名替代简写的方式来使用 jQuery：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.noConflict();</span><br><span class="line">jQuery(document).ready(function()&#123;</span><br><span class="line">  jQuery(&quot;button&quot;).click(function()&#123;</span><br><span class="line">      jQuery(&quot;p&quot;).text(&quot;jQuery 仍然在工作!&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也可以创建自己的简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var jq = $.noConflict();</span><br><span class="line">jq(document).ready(function()&#123;</span><br><span class="line">  jq(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  jq(&quot;p&quot;).text(&quot;jQuery 仍然在工作!&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h1&gt;&lt;p&gt;jQuery是一个JavaScript函数库。&lt;br&gt;jQuery是一个轻量级的”写的少，做的多”的Java
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript笔记</title>
    <link href="http://yoursite.com/2019/02/24/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/24/JavaScript笔记/</id>
    <published>2019-02-24T13:25:09.000Z</published>
    <updated>2020-07-10T02:10:46.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="JavaScript事件"><a href="#JavaScript事件" class="headerlink" title="JavaScript事件"></a>JavaScript事件</h2><ul><li>onclick　　   　　　单击事件</li><li>onmouseover　　 鼠标经过事件</li><li>onmouseout　　  鼠标移出事件</li><li>onchange　　　  文本内容改变事件</li><li>onselect　　　　  文本框选中事件</li><li>onfocus　　　  　 光标聚集事件</li><li>onblur　　　　 　 网页加载事件</li><li>onunload　　　　  关闭网页事件</li></ul><h2 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h2><h3 id="JavaScript使用关键字function定义函数"><a href="#JavaScript使用关键字function定义函数" class="headerlink" title="JavaScript使用关键字function定义函数"></a>JavaScript使用关键字function定义函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数可以通过声明定义，也可以是一个表达式"><a href="#函数可以通过声明定义，也可以是一个表达式" class="headerlink" title="函数可以通过声明定义，也可以是一个表达式"></a>函数可以通过声明定义，也可以是一个表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数表达式可以”自调用”"><a href="#函数表达式可以”自调用”" class="headerlink" title="函数表达式可以”自调用”"></a>函数表达式可以”自调用”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">"Hello!!"</span>;      <span class="comment">// 我将调用自己</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h3><p>JavaScript函数有属性和方法。</p><h3 id="JavaScript变量可以是局部变量或全局变量"><a href="#JavaScript变量可以是局部变量或全局变量" class="headerlink" title="JavaScript变量可以是局部变量或全局变量"></a>JavaScript变量可以是局部变量或全局变量</h3><p>函数可以访问由函数内部定义的变量。（局部变量）</p><p>函数也可以访问函数外部定义的变量。（全局变量）</p><h3 id="JavaScript闭包"><a href="#JavaScript闭包" class="headerlink" title="JavaScript闭包"></a>JavaScript闭包</h3><p>闭包是可访问其它函数作用域里变量的函数。因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会增加内存消耗。</p><h2 id="JavaScript-HTML-DOM"><a href="#JavaScript-HTML-DOM" class="headerlink" title="JavaScript　HTML　DOM"></a>JavaScript　HTML　DOM</h2><h3 id="HTML-DOM（文档对象模型）"><a href="#HTML-DOM（文档对象模型）" class="headerlink" title="HTML　DOM（文档对象模型）"></a>HTML　DOM（文档对象模型）</h3><p>HTML　DOM树<br><img src="htmltree.gif" alt="html dom 树"></p><h3 id="JavaScript-HTML-DOM-改变-HTML"><a href="#JavaScript-HTML-DOM-改变-HTML" class="headerlink" title="JavaScript　HTML　DOM - 改变 HTML"></a>JavaScript　HTML　DOM - 改变 HTML</h3><p>改变HTML输出流：JavaScript能够创建动态的HTML内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write()</span><br></pre></td></tr></table></figure><p>注意：不要在文档加载完成之后使用，这会覆盖该文档。</p><p>寻找元素：</p><p>通过ID找到HTML元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id)</span><br></pre></td></tr></table></figure><p>  通过标签名找到HTML元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementByTagName(标签名)</span><br></pre></td></tr></table></figure><p>如果有多个相同标签名，则会找到第一个。</p><p>改变HTML内容：修改HTML内容的最简单的方法是使用innerHTML属性改变元素的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).innerHTML=新的HTML</span><br></pre></td></tr></table></figure><p>改变HTML属性：如需改变HTML元素的属性，使用这个语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).属性=新属性值</span><br></pre></td></tr></table></figure><h3 id="JavaScript-HTML-DOM-改变CSS"><a href="#JavaScript-HTML-DOM-改变CSS" class="headerlink" title="JavaScript　HTML　DOM - 改变CSS"></a>JavaScript　HTML　DOM - 改变CSS</h3><p>改变 HTML 元素的样式，使用这个语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).style.property=新样式</span><br></pre></td></tr></table></figure><h3 id="JavaScript-HTML-DOM-事件"><a href="#JavaScript-HTML-DOM-事件" class="headerlink" title="JavaScript　HTML　DOM 事件"></a>JavaScript　HTML　DOM 事件</h3><p>HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。</p><h3 id="JavaScript-HTML-DOM-EventListener"><a href="#JavaScript-HTML-DOM-EventListener" class="headerlink" title="JavaScript　HTML　DOM　EventListener"></a>JavaScript　HTML　DOM　EventListener</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addEventListener() 方法用于向指定元素添加事件句柄。</span><br><span class="line">addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。</span><br></pre></td></tr></table></figure><p>可以向一个元素添加多个事件句柄。</p><p>可以向同个元素添加多个同类型的事件句柄，如：两个 “click” 事件。</p><p>可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。<br>addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。</p><p>当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强，在没有控制HTML标记时也可以添加事件监听。</p><p>你可以使用 removeEventListener() 方法来移除事件的监听。</p><h3 id="JavaScript-HTML-DOM-元素（节点）"><a href="#JavaScript-HTML-DOM-元素（节点）" class="headerlink" title="JavaScript　HTML　DOM　元素（节点）"></a>JavaScript　HTML　DOM　元素（节点）</h3><ul><li>创建新的 HTML 元素（节点）- appendChild()</li><li>创建新的 HTML 元素 (节点) - insertBefore()</li><li>移除已存在的元素 - removeChild()</li><li>替换 HTML 元素 - replaceChild()</li></ul><h3 id="JavaScript-HTML-DOM-集合-Collection"><a href="#JavaScript-HTML-DOM-集合-Collection" class="headerlink" title="JavaScript　HTML　DOM 集合(Collection)"></a>JavaScript　HTML　DOM 集合(Collection)</h3><p>getElementsByTagName() 方法返回 HTMLCollection 对象。</p><p>HTMLCollection 对象类似包含 HTML 元素的一个数组。</p><p>HTMLCollection 对象的 length 属性定义了集合中元素的数量。</p><p><strong>注意</strong><br>HTMLCollection 不是一个数组！<br>HTMLCollection 看起来可能是一个数组，但其实不是。<br>可以像数组一样，使用索引来获取元素。<br>HTMLCollection 无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。</p><h3 id="JavaScript-HTML-DOM-节点列表"><a href="#JavaScript-HTML-DOM-节点列表" class="headerlink" title="JavaScript　HTML　DOM　节点列表"></a>JavaScript　HTML　DOM　节点列表</h3><p>NodeList 对象是一个从文档中获取的节点列表 (集合) 。</p><p>NodeList 对象类似 HTMLCollection 对象。都可以使用索引来获取元素，都有 length 属性。</p><p>NodeList 对象包含属性节点和文本节点。</p><p><strong>NodeList不是一个数组！</strong></p><h2 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h2><h3 id="String字符串对象"><a href="#String字符串对象" class="headerlink" title="String字符串对象"></a>String字符串对象</h3><ol><li>String对象：<br>String对象用于处理已有的字符串<br>字符串可以使用单引号或双引号</li><li>在字符串中查找字符串：indexOf()</li><li>内容匹配：match()</li><li>替换内容：replace()</li><li>字符串大小写转换：toUpperCase()/toLowerCase()</li><li>字符串转为数组：strong&gt;split()</li></ol><h3 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h3><ol><li>Date对象：<br>&nbsp;日期对象用于处理日期和时间</li><li>获得当日的日期</li><li>常用方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getFullYear()：获取年份</span><br><span class="line">gerTime()：获取毫秒</span><br><span class="line">setFullYear()：设置具体的日期</span><br><span class="line">getDay()：获取星期</span><br></pre></td></tr></table></figure><h3 id="Array数组对象"><a href="#Array数组对象" class="headerlink" title="Array数组对象"></a>Array数组对象</h3><ol><li>Array对象：<br>&nbsp;使用单独的变量名来存储一系列的值</li><li>数组的创建：<br>&nbsp;例：var arr=[“html”,”css”,”javascript”];</li><li>数组的访问：<br>&nbsp;通过指定的组名以及索引号码可以访问某个特定的元素<br>注意：[0]是数组的第一个元素，[1]是数组的第二个元素。</li><li>数组常用方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">concat()：合并数组</span><br><span class="line">sort()：排序</span><br><span class="line">pushh()：末尾追加元素</span><br><span class="line">reverse()：数组元素翻转</span><br></pre></td></tr></table></figure><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><ol><li>Math对象：<br>执行常见的算数任务</li><li>常用方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">round()：四舍五入</span><br><span class="line">random()：返回<span class="number">0</span>~<span class="number">1</span>之间的随机数</span><br><span class="line">随机<span class="number">0</span>~<span class="number">10</span>之间的整数：paserInt(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line">max()：返回最大值</span><br><span class="line">min()：返回最小值</span><br><span class="line">abs()：返回绝对值</span><br></pre></td></tr></table></figure><h2 id="其它知识点"><a href="#其它知识点" class="headerlink" title="其它知识点"></a>其它知识点</h2><h3 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h3><p>变量的声明提前：</p><p>&nbsp;&nbsp;使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值），但是如果声明变量时不使用var关键字，则变量不会被声明提前。</p><p>函数的声明提前：</p><p>&nbsp;&nbsp;使用函数声明形式创建的函数function 函数(){}，它会在所有的代码执行之前就被创建。</p><h3 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h3><ul><li><p>创建一个元素节点对象<br>它需要一个标签名作为参数，<br>并将创建好的对象作为返回值返回。<br>var li = document.createElement(标签名);</p></li><li><p>创建一个文本节点对象<br>需要一个文本内容作为参数，<br>根据该内容创建文本节点，并将新的节点返回。<br>var text = document.createTextNode(“文本”);</p></li><li><p>向一个父节点中添加一个新的子节点<br>父节点.appendChild(子节点);</p></li><li><p>在指定的子节点前面插入新的子节点<br>父节点.insertBefore(新子节点，指定子节点);</p></li><li><p>指定子节点替换已有的子节点<br>父节点.replaceChild(新节点，旧节点)；</p></li><li><p>删除一个子节点<br>父节点.removeChild(子节点);<br>子节点.parentNode.removeChild(子节点);</p></li></ul><h2 id="JavaScript其它事件"><a href="#JavaScript其它事件" class="headerlink" title="JavaScript其它事件"></a>JavaScript其它事件</h2><h3 id="鼠标滚轮事件"><a href="#鼠标滚轮事件" class="headerlink" title="鼠标滚轮事件"></a>鼠标滚轮事件</h3><p><strong>onmousewheel</strong>鼠标滚轮事件<br>会在鼠标滚轮滚动时触发<br>(火狐浏览器不支持该属性，需要使用DOMMouseScroll来绑定滚动事件，且需要通过addEventListener()函数来绑定)</p><p><strong>event.wheelDelta</strong>获取鼠标滚轮滚动的方向<br>(火狐浏览器不支持，需要使用event.detail来获取滚动的方向)</p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p><strong>onkeydown</strong>按键被按下(当按键一直被按着时，事件会一直被触发)<br><strong>onkeyup</strong>按键被松开<br><strong>keyCode</strong>获取按键的编码</p><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><ul><li>浏览器对象模型</li><li>BOM可以使我们通过JS来操作浏览器</li><li>在BOM中为我们提供了一组对象，用来完成对浏览器的操作<br><strong>Window</strong>代表整个浏览器的窗口，同时window也是网页中的全局对象<br><strong>Navigator</strong>代表当前浏览器的信息，通过该对象可以来识别不同的浏览器<br><strong>Location</strong>代表当前浏览器的地址信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面<br><strong>History</strong>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<br>&nbsp;&nbsp;由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或者向后翻页<br>&nbsp;&nbsp;而且该操作只在当次访问时有效<br><strong>Screen</strong>代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关信息</li></ul><h2 id="JavaScript小练手"><a href="#JavaScript小练手" class="headerlink" title="JavaScript小练手"></a>JavaScript小练手</h2><p><strong><a href="https://github.com/nakuYK/pinterest-style-layout" target="_blank" rel="noopener">JS实现瀑布流布局</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript学习笔记&quot;&gt;&lt;a href=&quot;#JavaScript学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript学习笔记&quot;&gt;&lt;/a&gt;JavaScript学习笔记&lt;/h1&gt;&lt;h2 id=&quot;JavaScript事件&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5+CSS3学习笔记</title>
    <link href="http://yoursite.com/2019/02/24/HTML5%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/02/24/HTML5新特性/</id>
    <published>2019-02-24T05:13:21.000Z</published>
    <updated>2020-07-10T02:10:45.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5-CSS3学习笔记"><a href="#HTML5-CSS3学习笔记" class="headerlink" title="HTML5+CSS3学习笔记"></a>HTML5+CSS3学习笔记</h1><h2 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>用于绘画的canvas标签</p><p>用于媒介回放的video和audio元素</p><p>对本地离线储存的更好支持</p><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>新的特殊内容元素<br>如：article、footer、header、nav、section</p><p>新的表单控件<br>如：calendar、date、time、email、url、search</p><h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><p>Safari、Chrome、Firefox、Opera以及IE9基本支持了HTML5</p><h3 id="HTML5-Canvas"><a href="#HTML5-Canvas" class="headerlink" title="HTML5 Canvas"></a>HTML5 Canvas</h3><p>HTML5 <code>&lt;canvas&gt;</code>元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成。</p><p><code>&lt;canvas&gt;</code>标签只是图形容器，必须使用脚本来绘制图形。</p><h3 id="HTML5-内联-SVG"><a href="#HTML5-内联-SVG" class="headerlink" title="HTML5 内联 SVG"></a>HTML5 内联 SVG</h3><h4 id="什么是SVG"><a href="#什么是SVG" class="headerlink" title="什么是SVG"></a>什么是SVG</h4><ul><li>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</li><li>SVG 用于定义用于网络的基于矢量的图形</li><li>SVG 使用 XML 格式定义图形</li><li>SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失</li><li>SVG 是万维网联盟的标准</li></ul><h4 id="SVG优势"><a href="#SVG优势" class="headerlink" title="SVG优势"></a>SVG优势</h4><p>与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：</p><ul><li>SVG 图像可通过文本编辑器来创建和修改</li><li>SVG 图像可被搜索、索引、脚本化或压缩</li><li>SVG 是可伸缩的</li><li>SVG 图像可在任何的分辨率下被高质量地打印</li><li>SVG 可在图像质量不下降的情况下被放大</li></ul><h3 id="HTML5-MathML"><a href="#HTML5-MathML" class="headerlink" title="HTML5 MathML"></a>HTML5 MathML</h3><p>HTML5 可以在文档中使用 MathML 元素，对应的标签是 <code>&lt;math&gt;...&lt;/math&gt;</code> 。</p><p>MathML 是数学标记语言，是一种基于XML（标准通用标记语言的子集）的标准，用来在互联网上书写数学符号和公式的置标语言。</p><h3 id="HTML5-拖放（Drag-和-Drop）"><a href="#HTML5-拖放（Drag-和-Drop）" class="headerlink" title="HTML5 拖放（Drag 和 Drop）"></a>HTML5 拖放（Drag 和 Drop）</h3><ol><li>设置元素为可拖放,把 draggable 属性设置为 true</li><li>ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。<br>dataTransfer.setData() 方法设置被拖数据的数据类型和值</li><li>ondragover 事件规定在何处放置被拖动的数据。</li><li>进行放置 - ondrop</li></ol><h3 id="HTML5-Video"><a href="#HTML5-Video" class="headerlink" title="HTML5 Video"></a>HTML5 Video</h3><p><code>&lt;video&gt;</code>元素提供了 播放、暂停和音量控件来控制视频。</p><p>同时<code>&lt;video&gt;</code>元素也提供了 width 和 height 属性控制视频的尺寸.如果设置的高度和宽度，所需的视频空间会在页面加载时保留。如果没有设置这些属性，浏览器不知道大小的视频，浏览器就不能再加载时保留特定的空间，页面就会根据原始视频的大小而改变。</p><p><code>&lt;video&gt;</code>与<code>&lt;/video&gt;</code>标签之间插入的内容是提供给不支持 video 元素的浏览器显示的。</p><p><code>&lt;video&gt;</code>元素支持多个<code>&lt;source&gt;</code>元素.<code>&lt;source&gt;</code>元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式。</p><p>HTML5<code>&lt;video&gt;</code>元素同样拥有方法、属性和事件，可以使用JavaScript进行控制。</p><h3 id="HTML5-Audio"><a href="#HTML5-Audio" class="headerlink" title="HTML5 Audio"></a>HTML5 Audio</h3><p>control 属性供添加播放、暂停和音量控件。</p><p>在<code>&lt;audio&gt;</code>与<code>&lt;/audio&gt;</code>之间你需要插入浏览器不支持的<code>&lt;audio&gt;</code>元素的提示文本 。</p><p><code>&lt;audio&gt;</code>元素允许使用多个<code>&lt;source&gt;</code>元素。<code>&lt;source&gt;</code>元素可以链接不同的音频文件，浏览器将使用第一个支持的音频文件。</p><h3 id="HTML5-表单元素"><a href="#HTML5-表单元素" class="headerlink" title="HTML5 表单元素"></a>HTML5 表单元素</h3><h4 id="lt-datalist-gt"><a href="#lt-datalist-gt" class="headerlink" title="&lt;datalist&gt;"></a><code>&lt;datalist&gt;</code></h4><p><code>&lt;datalist&gt;</code>元素规定输入域的选项列表。</p><p><code>&lt;datalist&gt;</code>属性规定 form 或 input 域应该拥有自动完成功能。当用户在自动完成域中开始输入时，浏览器应该在该域中显示填写的选项：</p><p>使用<code>&lt;input&gt;</code>元素的列表属性与<code>&lt;datalist&gt;</code>元素绑定。</p><h4 id="lt-keygen-gt"><a href="#lt-keygen-gt" class="headerlink" title="&lt;keygen&gt;"></a><code>&lt;keygen&gt;</code></h4><ul><li><code>&lt;keygen&gt;</code>元素的作用是提供一种验证用户的可靠方法。</li><li><code>&lt;keygen&gt;</code>标签规定用于表单的密钥对生成器字段。</li></ul><p>当提交表单时，会生成两个键，一个是私钥，一个公钥。</p><p>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。</p><h4 id="lt-output-gt"><a href="#lt-output-gt" class="headerlink" title="&lt;output&gt;"></a><code>&lt;output&gt;</code></h4><ul><li><code>&lt;output&gt;</code>元素用于不同类型的输出，比如计算或脚本输出。</li></ul><h3 id="HTML5-语义元素"><a href="#HTML5-语义元素" class="headerlink" title="HTML5 语义元素"></a>HTML5 语义元素</h3><ul><li><code>&lt;section&gt;</code>标签定义文档中的节（section、区段）。</li><li><code>&lt;article&gt;</code>标签定义独立的内容。</li><li><code>&lt;nav&gt;</code>标签定义导航链接的部分。</li><li><code>&lt;aside&gt;</code>标签定义页面主区域内容之外的内容（比如侧边栏）。</li><li><code>&lt;header&gt;</code>元素描述了文档的头部区域。</li><li><code>&lt;footer&gt;</code>元素描述了文档的底部区域。</li><li><code>&lt;figure&gt;</code>标签规定独立的流内容（图像、图表、照片、代码等等）。</li><li><code>&lt;figure&gt;</code>元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。</li><li><code>&lt;figcaption&gt;</code>标签定义<code>&lt;figure&gt;</code>元素的标题。</li><li><code>&lt;figcaption&gt;</code>元素应该被置于 “figure” 元素的第一个或最后一个子元素的位置。</li></ul><h3 id="HTML5-Web-存储"><a href="#HTML5-Web-存储" class="headerlink" title="HTML5 Web 存储"></a>HTML5 Web 存储</h3><p>使用HTML5可以在本地存储用户的浏览数据。</p><p>Web存储需要更加的安全与快速。这些数据不会被保存在服务器上，但是这些数据只用于用户请求网站数据上。它也可以存储大量的数据，而不影响网站的性能。</p><ul><li>localStorage-用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</li><li>sessionStorage-用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</li></ul><h2 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h2><h3 id="常用标签属性"><a href="#常用标签属性" class="headerlink" title="常用标签属性"></a>常用标签属性</h3><ul><li><code>&lt;h1&gt;</code>:align 对齐方式</li><li><code>&lt;body&gt;</code>:bgcolor 背景颜色</li><li><code>&lt;a&gt;</code>:target 规定在何处打开链接</li><li>herf 指向一个文档的链接</li><li>name 创建文档内的链接</li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="什么是浮动"><a href="#什么是浮动" class="headerlink" title="什么是浮动"></a>什么是浮动</h3><p>浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留。</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ul><li>使用空标签清除浮动。在所有浮动标签后添加一个空标签 定义css clear:both，弊端是增加了无意义标签。</li><li>使用overflow。给包含浮动元素的父标签添加css属性overflow:auto。</li><li>父级div定义height。</li></ul><h2 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h2><ul><li><strong>absolute</strong>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。<br>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</li><li><strong>fixed</strong>生成固定定位的元素，相对于浏览器窗口进行定位。<br>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</li><li><strong>relative</strong>生成相对定位的元素，相对于其正常位置进行定位。<br>因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</li><li><strong>static</strong>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</li><li><strong>sticky</strong>粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。（<strong>css3</strong>）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML5-CSS3学习笔记&quot;&gt;&lt;a href=&quot;#HTML5-CSS3学习笔记&quot; class=&quot;headerlink&quot; title=&quot;HTML5+CSS3学习笔记&quot;&gt;&lt;/a&gt;HTML5+CSS3学习笔记&lt;/h1&gt;&lt;h2 id=&quot;HTML5新特性&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
</feed>
