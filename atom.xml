<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>久等</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-07T05:15:37.722Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YangKun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3笔记</title>
    <link href="http://yoursite.com/2019/06/29/CSS3%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/29/CSS3笔记/</id>
    <published>2019-06-29T13:26:52.000Z</published>
    <updated>2019-07-07T05:15:37.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS笔记"><a href="#CSS笔记" class="headerlink" title="CSS笔记"></a>CSS笔记</h3><h4 id="CSS3新增背景样式"><a href="#CSS3新增背景样式" class="headerlink" title="CSS3新增背景样式"></a>CSS3新增背景样式</h4><p>  background-size：规定背景图片的尺寸<br>  background-origin：规定背景图片的定位区域<br>  background-clip：规定背景的绘制区域</p><h4 id="CSS3新增文本效果"><a href="#CSS3新增文本效果" class="headerlink" title="CSS3新增文本效果"></a>CSS3新增文本效果</h4><p>  text-shadow：向文本添加阴影<br>  word-wrap：规定文本的换行规则</p><h4 id="CSS链接样式"><a href="#CSS链接样式" class="headerlink" title="CSS链接样式"></a>CSS链接样式</h4><p>  CSS链接的四种状态：</p><pre><code>a:link  普通的、未被访问的链接a:visited  用户已访问的链接a:hover  鼠标指针位于链接上方a:active  链接被点击的时刻</code></pre><p>  text-decoration: 大多用于去掉链接中的下划线</p><h4 id="CSS列表样式"><a href="#CSS列表样式" class="headerlink" title="CSS列表样式"></a>CSS列表样式</h4><p>  list-style-type: 列表类型<br>  list-style-image: 列表项图像</p><h4 id="定位Position"><a href="#定位Position" class="headerlink" title="定位Position"></a>定位Position</h4><p>  position：relative  相对定位<br>  position：absolute  绝对定位<br>  position：fixed  固定定位</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CSS笔记&quot;&gt;&lt;a href=&quot;#CSS笔记&quot; class=&quot;headerlink&quot; title=&quot;CSS笔记&quot;&gt;&lt;/a&gt;CSS笔记&lt;/h3&gt;&lt;h4 id=&quot;CSS3新增背景样式&quot;&gt;&lt;a href=&quot;#CSS3新增背景样式&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue+webpack打造TODO应用</title>
    <link href="http://yoursite.com/2019/03/12/Vue-webpack%E6%89%93%E9%80%A0TODO%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/12/Vue-webpack打造TODO应用/</id>
    <published>2019-03-12T06:37:54.000Z</published>
    <updated>2019-07-07T05:20:26.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-webpack打造TODO应用"><a href="#Vue-webpack打造TODO应用" class="headerlink" title="Vue+webpack打造TODO应用"></a>Vue+webpack打造TODO应用</h3><blockquote><p>此项目基于慕课网Jokcy老师的<a href="https://www.imooc.com/learn/935" target="_blank" rel="noopener">Vue+Webpack打造todo应用</a>视频教程编写。</p></blockquote><h4 id="地址：https-github-com-nakuYK-TODO"><a href="#地址：https-github-com-nakuYK-TODO" class="headerlink" title="地址：https://github.com/nakuYK/TODO"></a><strong>地址：<a href="https://github.com/nakuYK/TODO" target="_blank" rel="noopener">https://github.com/nakuYK/TODO</a></strong></h4><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>Vue：2.6.8<br>webpack：4.29.6</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在webpack版本4.0.0以上，某些API发生了更改，所以源码和Jokcy老师的会有所不同。如果你是webpack版本4.0.0以上，可以参考一下我的源码。</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>此项目首先完成一个前端工程的配置，通过webpack搭建一个完善的vue的workflow，然后基于Vue实现TODO的简单功能，并涵盖了vue的.vue文件以及jsx的开发模式的了解。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h5><pre><code>git clone https://github.com/nakuYK/TODO.git </code></pre><h5 id="安装npm依赖"><a href="#安装npm依赖" class="headerlink" title="安装npm依赖"></a>安装npm依赖</h5><pre><code>npm install</code></pre><h5 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h5><p>进入项目目录</p><pre><code>npm run dev</code></pre><h5 id="浏览器预览"><a href="#浏览器预览" class="headerlink" title="浏览器预览"></a>浏览器预览</h5><pre><code>localhost:8000</code></pre><h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><p><img src="picture.jpg" alt="预览"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue-webpack打造TODO应用&quot;&gt;&lt;a href=&quot;#Vue-webpack打造TODO应用&quot; class=&quot;headerlink&quot; title=&quot;Vue+webpack打造TODO应用&quot;&gt;&lt;/a&gt;Vue+webpack打造TODO应用&lt;/h3&gt;&lt;bloc
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>ES6笔记</title>
    <link href="http://yoursite.com/2019/03/06/ES6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/06/ES6笔记/</id>
    <published>2019-03-06T08:52:34.000Z</published>
    <updated>2019-07-07T04:01:38.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><h4 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h4><p>ES6 新增加了两个重要的 JavaScript 关键字: let 和 const。<br><strong>let</strong>声明的变量只在 let 命令所在的代码块内有效，不能重复声明，不存在变量提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">"apple"</span>;</span><br></pre></td></tr></table></figure><p>变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。</p><p><strong>const</strong>声明一个只读的常量，一旦声明，常量的值就不能改变。</p><h4 id="ES6-作用域"><a href="#ES6-作用域" class="headerlink" title="ES6 作用域"></a>ES6 作用域</h4><p>ES6引入了块级作用域<code>{}</code>，明确允许在块级作用域中声明函数。<br>块级作用域中，函数声明语句的行为类似于let，在块级作用域之外，不可以引用。</p><h4 id="ES6-Symbol"><a href="#ES6-Symbol" class="headerlink" title="ES6 Symbol"></a>ES6 Symbol</h4><p>ES6 引入了一种新的原始数据类型 Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名。<br>Symbol 函数栈不能用 new 命令，因为 Symbol 是原始数据类型，不是对象。可以接受一个字符串作为参数，为新创建的 Symbol 提供描述，用来显示在控制台或者作为字符串的时候使用，便于区分。</p><h4 id="ES6-对象"><a href="#ES6-对象" class="headerlink" title="ES6 对象"></a>ES6 对象</h4><p>ES6允许对象的属性直接写变量，这时候属性名是变量名，属性值是变量值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Amy"</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;age, name&#125;;</span><br><span class="line">person   <span class="comment">//&#123;age: 12, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure><p>方法名也可以简写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  sayHi()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hi"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.sayHi();  <span class="comment">//"Hi"</span></span><br></pre></td></tr></table></figure><h4 id="ES6-函数"><a href="#ES6-函数" class="headerlink" title="ES6 函数"></a>ES6 函数</h4><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name,age=<span class="number">17</span></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(name+<span class="string">","</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">"Amy"</span>,<span class="number">18</span>);  <span class="comment">// Amy,18</span></span><br><span class="line">fn(<span class="string">"Amy"</span>,<span class="string">""</span>);  <span class="comment">// Amy,</span></span><br><span class="line">fn(<span class="string">"Amy"</span>);     <span class="comment">// Amy,17</span></span><br></pre></td></tr></table></figure><h5 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h5><p>不定参数用来表示不确定参数个数，形如，…变量名，由…加上一个具名参数标识符组成。具名参数只能放在参数组的最后，并且有且只有一个不定参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);      <span class="comment">//2</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);  <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>将外部 this 传递到回调函数中，有了箭头函数，直接使用 this 就行。</p><h4 id="ES6-Class-类"><a href="#ES6-Class-类" class="headerlink" title="ES6 Class 类"></a>ES6 Class 类</h4><p>在ES6中，class (类)作为对象的模板被引入，可以通过 class 关键字定义类。<br>class 的本质是 function。<br>注意要点：不可重复声明；类定义不会被提升；类中方法不需要 function 关键字；方法间不能加分号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h3&gt;&lt;h4 id=&quot;let-与-const&quot;&gt;&lt;a href=&quot;#let-与-const&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery笔记</title>
    <link href="http://yoursite.com/2019/02/26/jQuery%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/26/jQuery笔记/</id>
    <published>2019-02-26T07:17:53.000Z</published>
    <updated>2019-07-07T04:41:52.113Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery是一个JavaScript函数库。<br>jQuery是一个轻量级的”写的少，做的多”的JavaScript库。<br>jQuery库包含以下功能：<br>　- HTML 元素选取<br>　- HTML 元素操作<br>　- CSS 操作<br>　- HTML 事件函数<br>　- JavaScript 特效和动画<br>　- HTML DOM 遍历和修改<br>　- AJAX<br>　- Utilities<br>除此之外，Jquery还提供了大量的插件。</p><h3 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h3><p>jQuery 选择器允许对 HTML 元素组或单个元素进行操作。<br>jQuery 选择器基于元素的id、类、类型、属性、属性值等”查找”（或选择）HTML元素。它基于已经存在的CSS选择器，除此之外，它还有一些自定义的选择器。<br>jQuery 中所有选择器都以美元符号开头：$()。</p><h3 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h3><p>常见 DOM 事件：</p><ul><li>click() 方法是当按钮点击事件被触发时会调用一个函数。</li><li>dblclick() 当双击元素时，会发生 dblclick 事件。</li><li>mouseenter() 当鼠标指针穿过元素时，会发生 mouseenter 事件。</li><li>mouseleave() 当鼠标指针离开元素时，会发生 mouseleave 事件。</li><li>mousedown() 当鼠标指针移动到元素上方，并按下鼠标按键时，会发生    mousedown 事件。</li><li>mouseup() 当在元素上松开鼠标按钮时，会发生 mouseup 事件。</li><li>hover() 方法用于模拟光标悬停事件。也就是同时具有mouseenter()和mouseleave()。</li><li>focus() 当元素获得焦点时，发生 focus 事件。</li><li>blur() 当元素失去焦点时，发生 blur 事件。</li></ul><h3 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h3><ul><li>hide()和show()方法来隐藏和显示 HTML 元素。toggle()方法可以切换hide()和 how()方法。（可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>fadeIn()和fadeOut()方法用来淡入已隐藏元素和淡出可见元素。fadeToggle()方法可以在它们之间切换。（可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>fadeTo()方法允许渐变为给定的不透明度（值介于0与1之间）。（可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>slideDown()和slideUp()用于向下滑出和向上滑入元素。slideToggle()方法以在它们之间切换。（可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>animate()方法用于自定义CSS属性。可实现动画效果。（必需的params参数定义形成动画的CSS属性；可选的speed参数规定效果的时长；可选的callback参数是动画完成后所执行的函数名称。）</li><li>stop()方法用于停止动画或效果，在它们完成之前。stop()方法适用于所有jQuery效果函数，包括滑动、淡入淡出和自定义动画。（可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。）</li></ul><p><strong>在一条语句中允许运行多个 jQuery 方法（在相同的元素上）。</strong></p><h3 id="jQuery-HTML"><a href="#jQuery-HTML" class="headerlink" title="jQuery HTML"></a>jQuery HTML</h3><h4 id="获得和设置内容"><a href="#获得和设置内容" class="headerlink" title="获得和设置内容"></a>获得和设置内容</h4><ul><li>text() 方法用于设置或返回所选元素的文本内容</li><li>html() 方法用于设置或返回所选元素的内容（包括 HTML 标记）</li><li>val() 方法用于设置或返回表单字段的值</li><li>attr() 方法用于获取属性值</li></ul><h4 id="添加内容-元素"><a href="#添加内容-元素" class="headerlink" title="添加内容/元素"></a>添加内容/元素</h4><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul><h4 id="删除内容-元素"><a href="#删除内容-元素" class="headerlink" title="删除内容/元素"></a>删除内容/元素</h4><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul><h4 id="操作-CSS"><a href="#操作-CSS" class="headerlink" title="操作 CSS"></a>操作 CSS</h4><ul><li>addClass() - 向被选元素添加一个或多个类</li><li>removeClass() - 从被选元素删除一个或多个类</li><li>toggleClass() - 对被选元素进行添加/删除类的切换操作</li><li>css() - 设置或返回样式属性</li></ul><h4 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h4><ul><li>width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）</li><li>height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）</li><li>innerWidth() 方法返回元素的宽度（包括内边距）</li><li>innerHeight() 方法返回元素的高度（包括内边距）</li><li>outerWidth() 方法返回元素的宽度（包括内边距和边框）</li><li>outerHeight() 方法返回元素的高度（包括内边距和边框）</li></ul><h3 id="jQuery-遍历"><a href="#jQuery-遍历" class="headerlink" title="jQuery 遍历"></a>jQuery 遍历</h3><h4 id="向上遍历"><a href="#向上遍历" class="headerlink" title="向上遍历"></a>向上遍历</h4><ul><li>parent() 方法返回被选元素的直接父元素。</li><li>parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<code>&lt;html&gt;</code>)。</li><li>parentsUntil() 方法返回介于两个给定元素之间的所有<strong>祖先</strong>元素。</li></ul><h4 id="向下遍历"><a href="#向下遍历" class="headerlink" title="向下遍历"></a>向下遍历</h4><ul><li>children() 方法返回被选元素的所有直接子元素。</li><li>find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。</li></ul><h4 id="同级遍历"><a href="#同级遍历" class="headerlink" title="同级遍历"></a>同级遍历</h4><ul><li>siblings() 方法返回被选元素的所有同级元素。</li><li>next() 方法返回被选元素的下一个同级元素。</li><li>nextAll() 方法返回被选元素的所有跟随的同级元素。</li><li>nextUntil() 方法返回介于两个给定参数之间的所有跟随的同级元素。</li><li>prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同级元素（在 DOM 树中沿着同级之前元素遍历，而不是之后元素遍历）。</li></ul><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><ul><li>first() 方法返回被选元素的首个元素。</li><li>last() 方法返回被选元素的最后一个元素。</li><li>eq() 方法返回被选元素中带有指定索引号的元素。（指定参数索引）</li><li>filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。（指定参数）</li><li>not() 方法返回不匹配标准的所有元素。与filter() 相反。</li></ul><h3 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery AJAX"></a>jQuery AJAX</h3><p>AJAX 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。<br>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。<br>load() 方法从服务器加载数据，并把返回的数据放入被选元素中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).load(URL,data,callback);</span><br></pre></td></tr></table></figure><p>$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(URL,callback);</span><br></pre></td></tr></table></figure><p>$.post() 方法通过 HTTP POST 请求向服务器提交数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(URL,data,callback);</span><br></pre></td></tr></table></figure><h3 id="jQuery-noConflict-方法"><a href="#jQuery-noConflict-方法" class="headerlink" title="jQuery - noConflict() 方法"></a>jQuery - noConflict() 方法</h3><p>jQuery 使用 $ 符号作为 jQuery 的简写。<br>如果其他 JavaScript 框架也使用 $ 符号作为简写，有可能导致脚本停止运行。<br>noConflict() 方法会释放对 $ 标识符的控制，这样其他脚本就可以使用它了。<br>可以通过全名替代简写的方式来使用 jQuery：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.noConflict();</span><br><span class="line">jQuery(document).ready(function()&#123;</span><br><span class="line">  jQuery(&quot;button&quot;).click(function()&#123;</span><br><span class="line">      jQuery(&quot;p&quot;).text(&quot;jQuery 仍然在工作!&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也可以创建自己的简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var jq = $.noConflict();</span><br><span class="line">jq(document).ready(function()&#123;</span><br><span class="line">  jq(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  jq(&quot;p&quot;).text(&quot;jQuery 仍然在工作!&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jQuery是一个JavaScript函数库。&lt;br&gt;jQuery是一个轻量级的”写的少，做的多”的JavaScript库。&lt;br&gt;jQuery库包含以下功能：&lt;br&gt;　- HTML 元素选取&lt;br&gt;　- HTML 元素操作&lt;br&gt;　- CSS 操作&lt;br&gt;　- HTML 
      
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript笔记</title>
    <link href="http://yoursite.com/2019/02/24/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/24/JavaScript笔记/</id>
    <published>2019-02-24T13:25:09.000Z</published>
    <updated>2019-07-07T03:54:26.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript事件"><a href="#JavaScript事件" class="headerlink" title="JavaScript事件"></a>JavaScript事件</h3><blockquote><p>onclick　　   　　　单击事件<br>onmouseover　　 鼠标经过事件<br>onmouseout　　  鼠标移出事件<br>onchange　　　  文本内容改变事件<br>onselect　　　　  文本框选中事件<br>onfocus　　　  　 光标聚集事件<br>onblur　　　　 　 网页加载事件<br>onunload　　　　  关闭网页事件</p></blockquote><h3 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h3><h4 id="JavaScript使用关键字function定义函数"><a href="#JavaScript使用关键字function定义函数" class="headerlink" title="JavaScript使用关键字function定义函数"></a>JavaScript使用关键字function定义函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数可以通过声明定义，也可以是一个表达式"><a href="#函数可以通过声明定义，也可以是一个表达式" class="headerlink" title="函数可以通过声明定义，也可以是一个表达式"></a>函数可以通过声明定义，也可以是一个表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数表达式可以”自调用”"><a href="#函数表达式可以”自调用”" class="headerlink" title="函数表达式可以”自调用”"></a>函数表达式可以”自调用”</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">"Hello!!"</span>;      <span class="comment">// 我将调用自己</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h4><p>JavaScript函数有属性和方法。</p><h4 id="JavaScript变量可以是局部变量或全局变量"><a href="#JavaScript变量可以是局部变量或全局变量" class="headerlink" title="JavaScript变量可以是局部变量或全局变量"></a>JavaScript变量可以是局部变量或全局变量</h4><p>函数可以访问由函数内部定义的变量。（局部变量）<br>函数也可以访问函数外部定义的变量。（全局变量）</p><h4 id="JavaScript闭包"><a href="#JavaScript闭包" class="headerlink" title="JavaScript闭包"></a>JavaScript闭包</h4><p>闭包是可访问其它函数作用域里变量的函数。因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会增加内存消耗。</p><h3 id="JavaScript-HTML-DOM"><a href="#JavaScript-HTML-DOM" class="headerlink" title="JavaScript　HTML　DOM"></a>JavaScript　HTML　DOM</h3><h4 id="HTML-DOM（文档对象模型）"><a href="#HTML-DOM（文档对象模型）" class="headerlink" title="HTML　DOM（文档对象模型）"></a>HTML　DOM（文档对象模型）</h4><p>HTML　DOM树<br><img src="htmltree.gif" alt="html dom 树"></p><h4 id="JavaScript-HTML-DOM-改变-HTML"><a href="#JavaScript-HTML-DOM-改变-HTML" class="headerlink" title="JavaScript　HTML　DOM - 改变 HTML"></a>JavaScript　HTML　DOM - 改变 HTML</h4><p>改变HTML输出流：JavaScript能够创建动态的HTML内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write()</span><br></pre></td></tr></table></figure><p>注意：不要在文档加载完成之后使用，这会覆盖该文档。</p><p>寻找元素：<br>  通过ID找到HTML元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id)</span><br></pre></td></tr></table></figure><p>  通过标签名找到HTML元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementByTagName(标签名)</span><br></pre></td></tr></table></figure><p>  如果有多个相同标签名，则会找到第一个。</p><p>改变HTML内容：修改HTML内容的最简单的方法是使用innerHTML属性改变元素的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).innerHTML=新的HTML</span><br></pre></td></tr></table></figure><p>改变HTML属性：如需改变HTML元素的属性，使用这个语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).属性=新属性值</span><br></pre></td></tr></table></figure><h4 id="JavaScript-HTML-DOM-改变CSS"><a href="#JavaScript-HTML-DOM-改变CSS" class="headerlink" title="JavaScript　HTML　DOM - 改变CSS"></a>JavaScript　HTML　DOM - 改变CSS</h4><p>改变 HTML 元素的样式，使用这个语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).style.property=新样式</span><br></pre></td></tr></table></figure><h4 id="JavaScript-HTML-DOM-事件"><a href="#JavaScript-HTML-DOM-事件" class="headerlink" title="JavaScript　HTML　DOM 事件"></a>JavaScript　HTML　DOM 事件</h4><p>HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。</p><h4 id="JavaScript-HTML-DOM-EventListener"><a href="#JavaScript-HTML-DOM-EventListener" class="headerlink" title="JavaScript　HTML　DOM　EventListener"></a>JavaScript　HTML　DOM　EventListener</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addEventListener() 方法用于向指定元素添加事件句柄。</span><br><span class="line">addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。</span><br></pre></td></tr></table></figure><p>可以向一个元素添加多个事件句柄。<br>可以向同个元素添加多个同类型的事件句柄，如：两个 “click” 事件。<br>可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。<br>addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。<br>当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强，在没有控制HTML标记时也可以添加事件监听。<br>你可以使用 removeEventListener() 方法来移除事件的监听。</p><h4 id="JavaScript-HTML-DOM-元素（节点）"><a href="#JavaScript-HTML-DOM-元素（节点）" class="headerlink" title="JavaScript　HTML　DOM　元素（节点）"></a>JavaScript　HTML　DOM　元素（节点）</h4><ul><li>创建新的 HTML 元素（节点）- appendChild()</li><li>创建新的 HTML 元素 (节点) - insertBefore()</li><li>移除已存在的元素 - removeChild()</li><li>替换 HTML 元素 - replaceChild()</li></ul><h4 id="JavaScript-HTML-DOM-集合-Collection"><a href="#JavaScript-HTML-DOM-集合-Collection" class="headerlink" title="JavaScript　HTML　DOM 集合(Collection)"></a>JavaScript　HTML　DOM 集合(Collection)</h4><p>getElementsByTagName() 方法返回 HTMLCollection 对象。<br>HTMLCollection 对象类似包含 HTML 元素的一个数组。<br>HTMLCollection 对象的 length 属性定义了集合中元素的数量。<br><strong>注意</strong><br>HTMLCollection 不是一个数组！<br>HTMLCollection 看起来可能是一个数组，但其实不是。<br>可以像数组一样，使用索引来获取元素。<br>HTMLCollection 无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。</p><h4 id="JavaScript-HTML-DOM-节点列表"><a href="#JavaScript-HTML-DOM-节点列表" class="headerlink" title="JavaScript　HTML　DOM　节点列表"></a>JavaScript　HTML　DOM　节点列表</h4><p>NodeList 对象是一个从文档中获取的节点列表 (集合) 。<br>NodeList 对象类似 HTMLCollection 对象。都可以使用索引来获取元素，都有 length 属性。<br>NodeList 对象包含属性节点和文本节点。<br><strong>NodeList不是一个数组！</strong></p><h3 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h3><h4 id="String字符串对象"><a href="#String字符串对象" class="headerlink" title="String字符串对象"></a>String字符串对象</h4><ol><li>String对象：<br>&nbsp;String对象用于处理已有的字符串<br>&nbsp;字符串可以使用单引号或双引号</li><li>在字符串中查找字符串：indexOf()</li><li>内容匹配：match()</li><li>替换内容：replace()</li><li>字符串大小写转换：toUpperCase()/toLowerCase()</li><li>字符串转为数组：strong&gt;split()</li></ol><h4 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h4><ol><li>Date对象：<br>&nbsp;日期对象用于处理日期和时间</li><li>获得当日的日期</li><li>常用方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getFullYear()：获取年份</span><br><span class="line">gerTime()：获取毫秒</span><br><span class="line">setFullYear()：设置具体的日期</span><br><span class="line">getDay()：获取星期</span><br></pre></td></tr></table></figure><h4 id="Array数组对象"><a href="#Array数组对象" class="headerlink" title="Array数组对象"></a>Array数组对象</h4><ol><li>Array对象：<br>&nbsp;使用单独的变量名来存储一系列的值</li><li>数组的创建：<br>&nbsp;例：var arr=[“html”,”css”,”javascript”];</li><li>数组的访问：<br>&nbsp;通过指定的组名以及索引号码可以访问某个特定的元素<br>注意：[0]是数组的第一个元素，[1]是数组的第二个元素。</li><li>数组常用方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">concat()：合并数组</span><br><span class="line">sort()：排序</span><br><span class="line">pushh()：末尾追加元素</span><br><span class="line">reverse()：数组元素翻转</span><br></pre></td></tr></table></figure><h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><ol><li>Math对象：<br>执行常见的算数任务</li><li>常用方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">round()：四舍五入</span><br><span class="line">random()：返回<span class="number">0</span>~<span class="number">1</span>之间的随机数</span><br><span class="line">随机<span class="number">0</span>~<span class="number">10</span>之间的整数：paserInt(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line">max()：返回最大值</span><br><span class="line">min()：返回最小值</span><br><span class="line">abs()：返回绝对值</span><br></pre></td></tr></table></figure><h3 id="其它知识点"><a href="#其它知识点" class="headerlink" title="其它知识点"></a>其它知识点</h3><h4 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h4><p>  变量的声明提前：</p><p>&nbsp;&nbsp;使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值），但是如果声明变量时不使用var关键字，则变量不会被声明提前。</p><p>  函数的声明提前：<br>&nbsp;&nbsp;使用函数声明形式创建的函数function 函数(){}，它会在所有的代码执行之前就被创建。</p><h4 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h4><ul><li><p>创建一个元素节点对象<br>它需要一个标签名作为参数，<br>并将创建好的对象作为返回值返回。<br>var li = document.createElement(标签名);</p></li><li><p>创建一个文本节点对象<br>需要一个文本内容作为参数，<br>根据该内容创建文本节点，并将新的节点返回。<br>var text = document.createTextNode(“文本”);</p></li><li><p>向一个父节点中添加一个新的子节点<br>父节点.appendChild(子节点);</p></li><li><p>在指定的子节点前面插入新的子节点<br>父节点.insertBefore(新子节点，指定子节点);</p></li><li><p>指定子节点替换已有的子节点<br>父节点.replaceChild(新节点，旧节点)；</p></li><li><p>删除一个子节点<br>父节点.removeChild(子节点);<br>子节点.parentNode.removeChild(子节点);</p></li></ul><h3 id="JavaScript其它事件"><a href="#JavaScript其它事件" class="headerlink" title="JavaScript其它事件"></a>JavaScript其它事件</h3><h4 id="鼠标滚轮事件"><a href="#鼠标滚轮事件" class="headerlink" title="鼠标滚轮事件"></a>鼠标滚轮事件</h4><p><strong>onmousewheel</strong>鼠标滚轮事件<br>会在鼠标滚轮滚动时触发<br>(火狐浏览器不支持该属性，需要使用DOMMouseScroll来绑定滚动事件，且需要通过addEventListener()函数来绑定)</p><p><strong>event.wheelDelta</strong>获取鼠标滚轮滚动的方向<br>(火狐浏览器不支持，需要使用event.detail来获取滚动的方向)</p><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><p><strong>onkeydown</strong>按键被按下(当按键一直被按着时，事件会一直被触发)<br><strong>onkeyup</strong>按键被松开<br><strong>keyCode</strong>获取按键的编码</p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><ul><li>浏览器对象模型</li><li>BOM可以使我们通过JS来操作浏览器</li><li>在BOM中为我们提供了一组对象，用来完成对浏览器的操作<br><strong>Window</strong>代表整个浏览器的窗口，同时window也是网页中的全局对象<br><strong>Navigator</strong>代表当前浏览器的信息，通过该对象可以来识别不同的浏览器<br><strong>Location</strong>代表当前浏览器的地址信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面<br><strong>History</strong>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<br>&nbsp;&nbsp;由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或者向后翻页<br>&nbsp;&nbsp;而且该操作只在当次访问时有效<br><strong>Screen</strong>代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关信息</li></ul><h3 id="JavaScript小练手"><a href="#JavaScript小练手" class="headerlink" title="JavaScript小练手"></a>JavaScript小练手</h3><p><strong><a href="https://github.com/nakuYK/pinterest-style-layout" target="_blank" rel="noopener">JS实现瀑布流布局</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JavaScript事件&quot;&gt;&lt;a href=&quot;#JavaScript事件&quot; class=&quot;headerlink&quot; title=&quot;JavaScript事件&quot;&gt;&lt;/a&gt;JavaScript事件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;onclick　　   　　　单击
      
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML+CSS笔记</title>
    <link href="http://yoursite.com/2019/02/24/HTML5%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/02/24/HTML5新特性/</id>
    <published>2019-02-24T05:13:21.000Z</published>
    <updated>2019-07-07T04:08:10.006Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h3><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>用于绘画的canvas标签<br>用于媒介回放的video和audio元素<br>对本地离线储存的更好支持</p><h4 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h4><p>新的特殊内容元素<br>如：article、footer、header、nav、section<br>新的表单控件<br>如：calendar、date、time、email、url、search</p><h4 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h4><p>Safari、Chrome、Firefox、Opera以及IE9基本支持了HTML5</p><h4 id="HTML5-Canvas"><a href="#HTML5-Canvas" class="headerlink" title="HTML5 Canvas"></a>HTML5 Canvas</h4><p>HTML5 <code>&lt;canvas&gt;</code>元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成。<br><code>&lt;canvas&gt;</code>标签只是图形容器，必须使用脚本来绘制图形。</p><h4 id="HTML5-内联-SVG"><a href="#HTML5-内联-SVG" class="headerlink" title="HTML5 内联 SVG"></a>HTML5 内联 SVG</h4><h5 id="什么是SVG"><a href="#什么是SVG" class="headerlink" title="什么是SVG"></a>什么是SVG</h5><ul><li>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</li><li>SVG 用于定义用于网络的基于矢量的图形</li><li>SVG 使用 XML 格式定义图形</li><li>SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失</li><li>SVG 是万维网联盟的标准</li></ul><h5 id="SVG优势"><a href="#SVG优势" class="headerlink" title="SVG优势"></a>SVG优势</h5><p>与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：</p><ul><li>SVG 图像可通过文本编辑器来创建和修改</li><li>SVG 图像可被搜索、索引、脚本化或压缩</li><li>SVG 是可伸缩的</li><li>SVG 图像可在任何的分辨率下被高质量地打印</li><li>SVG 可在图像质量不下降的情况下被放大</li></ul><h4 id="HTML5-MathML"><a href="#HTML5-MathML" class="headerlink" title="HTML5 MathML"></a>HTML5 MathML</h4><p>HTML5 可以在文档中使用 MathML 元素，对应的标签是 <code>&lt;math&gt;...&lt;/math&gt;</code> 。<br>MathML 是数学标记语言，是一种基于XML（标准通用标记语言的子集）的标准，用来在互联网上书写数学符号和公式的置标语言。</p><h4 id="HTML5-拖放（Drag-和-Drop）"><a href="#HTML5-拖放（Drag-和-Drop）" class="headerlink" title="HTML5 拖放（Drag 和 Drop）"></a>HTML5 拖放（Drag 和 Drop）</h4><p>1.设置元素为可拖放,把 draggable 属性设置为 true<br>2.ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。<br>  dataTransfer.setData() 方法设置被拖数据的数据类型和值<br>3.ondragover 事件规定在何处放置被拖动的数据。<br>4.进行放置 - ondrop</p><h4 id="HTML5-Video"><a href="#HTML5-Video" class="headerlink" title="HTML5 Video"></a>HTML5 Video</h4><p><code>&lt;video&gt;</code>元素提供了 播放、暂停和音量控件来控制视频。<br>同时<code>&lt;video&gt;</code>元素也提供了 width 和 height 属性控制视频的尺寸.如果设置的高度和宽度，所需的视频空间会在页面加载时保留。如果没有设置这些属性，浏览器不知道大小的视频，浏览器就不能再加载时保留特定的空间，页面就会根据原始视频的大小而改变。<br><code>&lt;video&gt;</code>与<code>&lt;/video&gt;</code>标签之间插入的内容是提供给不支持 video 元素的浏览器显示的。<br><code>&lt;video&gt;</code>元素支持多个<code>&lt;source&gt;</code>元素.<code>&lt;source&gt;</code>元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式。<br>HTML5<code>&lt;video&gt;</code>元素同样拥有方法、属性和事件，可以使用JavaScript进行控制。</p><h4 id="HTML5-Audio"><a href="#HTML5-Audio" class="headerlink" title="HTML5 Audio"></a>HTML5 Audio</h4><p>control 属性供添加播放、暂停和音量控件。<br>在<code>&lt;audio&gt;</code>与<code>&lt;/audio&gt;</code>之间你需要插入浏览器不支持的<code>&lt;audio&gt;</code>元素的提示文本 。<br><code>&lt;audio&gt;</code>元素允许使用多个<code>&lt;source&gt;</code>元素.<code>&lt;source&gt;</code>元素可以链接不同的音频文件，浏览器将使用第一个支持的音频文件。</p><h4 id="HTML5-表单元素"><a href="#HTML5-表单元素" class="headerlink" title="HTML5 表单元素"></a>HTML5 表单元素</h4><h5 id="lt-datalist-gt"><a href="#lt-datalist-gt" class="headerlink" title="&lt;datalist&gt;"></a><code>&lt;datalist&gt;</code></h5><p>  <code>&lt;datalist&gt;</code>元素规定输入域的选项列表。<br>  <code>&lt;datalist&gt;</code>属性规定 form 或 input 域应该拥有自动完成功能。当用户在自动完成域中开始输入时，浏览器应该在该域中显示填写的选项：<br>  使用<code>&lt;input&gt;</code>元素的列表属性与<code>&lt;datalist&gt;</code>元素绑定。</p><h5 id="lt-keygen-gt"><a href="#lt-keygen-gt" class="headerlink" title="&lt;keygen&gt;"></a><code>&lt;keygen&gt;</code></h5><p>  <code>&lt;keygen&gt;</code>元素的作用是提供一种验证用户的可靠方法。<br>  <code>&lt;keygen&gt;</code>标签规定用于表单的密钥对生成器字段。<br>  当提交表单时，会生成两个键，一个是私钥，一个公钥。<br>  私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。</p><h5 id="lt-output-gt"><a href="#lt-output-gt" class="headerlink" title="&lt;output&gt;"></a><code>&lt;output&gt;</code></h5><p>  <code>&lt;output&gt;</code>元素用于不同类型的输出，比如计算或脚本输出。</p><h4 id="HTML5-语义元素"><a href="#HTML5-语义元素" class="headerlink" title="HTML5 语义元素"></a>HTML5 语义元素</h4><p><code>&lt;section&gt;</code>标签定义文档中的节（section、区段）。<br><code>&lt;article&gt;</code>标签定义独立的内容。<br><code>&lt;nav&gt;</code>标签定义导航链接的部分。<br><code>&lt;aside&gt;</code>标签定义页面主区域内容之外的内容（比如侧边栏）。<br><code>&lt;header&gt;</code>元素描述了文档的头部区域。<br><code>&lt;footer&gt;</code>元素描述了文档的底部区域。<br><code>&lt;figure&gt;</code>标签规定独立的流内容（图像、图表、照片、代码等等）。<br><code>&lt;figure&gt;</code>元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。<br><code>&lt;figcaption&gt;</code>标签定义<code>&lt;figure&gt;</code>元素的标题。<br><code>&lt;figcaption&gt;</code>元素应该被置于 “figure” 元素的第一个或最后一个子元素的位置。</p><h4 id="HTML5-Web-存储"><a href="#HTML5-Web-存储" class="headerlink" title="HTML5 Web 存储"></a>HTML5 Web 存储</h4><p>使用HTML5可以在本地存储用户的浏览数据。<br>Web存储需要更加的安全与快速。这些数据不会被保存在服务器上，但是这些数据只用于用户请求网站数据上。它也可以存储大量的数据，而不影响网站的性能。</p><ul><li>localStorage-用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</li><li>sessionStorage-用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</li></ul><h3 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h3><h4 id="常用标签属性"><a href="#常用标签属性" class="headerlink" title="常用标签属性"></a>常用标签属性</h4><p>&nbsp;&nbsp;<code>&lt;h1&gt;</code>:align 对齐方式<br>&nbsp;&nbsp;<code>&lt;body&gt;</code>:bgcolor 背景颜色<br>&nbsp;&nbsp;<code>&lt;a&gt;</code>:target 规定在何处打开链接<br>&nbsp;&nbsp;herf 指向一个文档的链接<br>&nbsp;&nbsp;name 创建文档内的链接</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="什么是浮动"><a href="#什么是浮动" class="headerlink" title="什么是浮动"></a>什么是浮动</h4><p>浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留。</p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><ul><li>使用空标签清除浮动。在所有浮动标签后添加一个空标签 定义css clear:both，弊端是增加了无意义标签。</li><li>使用overflow。给包含浮动元素的父标签添加css属性overflow:auto。</li><li>父级div定义height。</li></ul><h3 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h3><p><strong>absolute</strong><br>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。<br>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。<br><strong>fixed</strong><br>生成固定定位的元素，相对于浏览器窗口进行定位。<br>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。<br><strong>relative</strong><br>生成相对定位的元素，相对于其正常位置进行定位。<br>因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。<br><strong>static</strong><br>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。<br><strong>sticky</strong><br>粘性定位，该定位基于用户滚动的位置。<br>它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。（<strong>css3</strong>）</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="1-减少HTTP请求"><a href="#1-减少HTTP请求" class="headerlink" title="1.减少HTTP请求"></a>1.减少HTTP请求</h4><h4 id="2-使用CDN"><a href="#2-使用CDN" class="headerlink" title="2.使用CDN"></a>2.使用CDN</h4><p>CDN（内容发布网络）是一组分布在多个不同地理位置的Web服务器，用于更加有效地向用户发布内容。在优化性能时，向特定用户发布内容的服务器的选择基于对网络慕课拥堵的测量。例如，CDN可能选择网络阶跃数最小的服务器，或者具有最短响应时间的服务器。</p><h4 id="3-添加Expires头"><a href="#3-添加Expires头" class="headerlink" title="3.添加Expires头"></a>3.添加Expires头</h4><p>页面的初次访问者会进行很多HTTP请求，但是通过使用一个长久的Expires头，可以使这些组件被缓存，下次访问的时候，就可以减少不必要的HTPP请求，从而提高加载速度。</p><h4 id="4-压缩组件"><a href="#4-压缩组件" class="headerlink" title="4.压缩组件"></a>4.压缩组件</h4><p>从HTTP1.1开始，Web客户端可以通过HTTP请求中的Accept-Encoding头来表示对压缩的支持<br>如果Web服务器看到请求中有这个头，就会使用客户端列出来的方法中的一种来进行压缩。Web服务器通过响应中的Content-Encoding来通知 Web客户端。</p><h4 id="5-将CSS样式表放在头部"><a href="#5-将CSS样式表放在头部" class="headerlink" title="5.将CSS样式表放在头部"></a>5.将CSS样式表放在头部</h4><p>将样式表放在头部对于实际页面加载的时间并不能造成太大影响，但是这会减少页面首屏出现的时间，使页面内容逐步呈现，改善用户体验，防止“白屏”。</p><h4 id="6-将JavaScript脚本放在底部"><a href="#6-将JavaScript脚本放在底部" class="headerlink" title="6.将JavaScript脚本放在底部"></a>6.将JavaScript脚本放在底部</h4><p>脚本放在底部对于实际页面加载的时间并不能造成太大影响，但是这会减少页面首屏出现的时间，使页面内容逐步呈现。</p><h4 id="7-避免CSS表达式"><a href="#7-避免CSS表达式" class="headerlink" title="7.避免CSS表达式"></a>7.避免CSS表达式</h4><h4 id="8-使用外部的JavaScript和CSS"><a href="#8-使用外部的JavaScript和CSS" class="headerlink" title="8.使用外部的JavaScript和CSS"></a>8.使用外部的JavaScript和CSS</h4><p>当脚本或者样式是从外部引入的文件，浏览器就有可能缓存它们，从而在以后加载的时候能够直接使用缓存，而HTML文档的大小减小，从而提高加载速度。</p><h4 id="9-精简JavaScript和CSS"><a href="#9-精简JavaScript和CSS" class="headerlink" title="9.精简JavaScript和CSS"></a>9.精简JavaScript和CSS</h4><p>精简就是从代码中移除不必要的字符以减少文件大小，降低加载的时间。</p><h4 id="10-可缓存的Ajax"><a href="#10-可缓存的Ajax" class="headerlink" title="10.可缓存的Ajax"></a>10.可缓存的Ajax</h4><p>在进行Ajax请求的时候，可以选择尽量使用get方法，这样可以使用客户端的缓存，提高请求速度。</p><h3 id="Doctype作用？标准模式与兼容模式各有什么区别”-”"><a href="#Doctype作用？标准模式与兼容模式各有什么区别”-”" class="headerlink" title="Doctype作用？标准模式与兼容模式各有什么区别”?”"></a>Doctype作用？标准模式与兼容模式各有什么区别”?”</h3><p>（1） <code>&lt;!DOCTYPE&gt;</code>声明位于位于HTML文档中的第一行，处于 <code>&lt;html&gt;</code>标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。<br>（2） 标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p><h3 id="行内元素有哪些？块级元素有哪些？空-void-元素有那些"><a href="#行内元素有哪些？块级元素有哪些？空-void-元素有那些" class="headerlink" title="行内元素有哪些？块级元素有哪些？空(void)元素有那些"></a>行内元素有哪些？块级元素有哪些？空(void)元素有那些</h3><p>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。<br>（1） 行内元素有：a　b　span　img　input　select　strong（强调的语气）<br>（2） 块级元素有：div　ul　ol　li　dl　dt　dd　h1　h2　h3　h4…　p<br>（3） 常见的空元素：<code>&lt;br&gt;　&lt;hr&gt;　&lt;img&gt;　&lt;input&gt;　&lt;link&gt;　&lt;meta&gt;</code></p><h3 id="页面导入样式时，使用link和-import有什么区别”-”"><a href="#页面导入样式时，使用link和-import有什么区别”-”" class="headerlink" title="页面导入样式时，使用link和@import有什么区别”?”"></a>页面导入样式时，使用link和@import有什么区别”?”</h3><p>（1） link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;<br>（2） 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。</p><h3 id="介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的”-”"><a href="#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的”-”" class="headerlink" title="介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的”?”"></a>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的”?”</h3><p>（1）有两种， IE 盒子模型、W3C 盒子模型；<br>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；<br>（3）区  别： IE的content部分把 border 和 padding计算了进去;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTML5新特性&quot;&gt;&lt;a href=&quot;#HTML5新特性&quot; class=&quot;headerlink&quot; title=&quot;HTML5新特性&quot;&gt;&lt;/a&gt;HTML5新特性&lt;/h3&gt;&lt;h4 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
</feed>
